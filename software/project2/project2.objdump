
project2.elf:     file format elf32-littlenios2
project2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000264 memsz 0x00000264 flags r-x
    LOAD off    0x00001284 vaddr 0x00000284 paddr 0x00000288 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000128c vaddr 0x0000028c paddr 0x0000028c align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001288  2**0
                  CONTENTS
  2 .text         00000254  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00000274  00000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00000284  00000288  00001284  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  0000028c  0000028c  0000128c  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  000002a4  000002a4  00001288  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  000012b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b70  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000689  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000751  00000000  00000000  00002611  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000625  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000115  00000000  00000000  00003519  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003630  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00003640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004466  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00004469  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000446c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000446d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000446e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004472  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00004476  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000447a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003a  00000000  00000000  00004481  2**0
                  CONTENTS, READONLY
 26 .jdi          000035a5  00000000  00000000  000044bb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005b969  00000000  00000000  00007a60  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000274 l    d  .rodata	00000000 .rodata
00000284 l    d  .rwdata	00000000 .rwdata
0000028c l    d  .bss	00000000 .bss
000002a4 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../project2_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0000018c g     F .text	0000002c alt_main
00000288 g       *ABS*	00000000 __flash_rwdata_start
000001b8 g     F .text	00000038 alt_putstr
00000250 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000029c g     O .bss	00000004 alt_argv
00008284 g       *ABS*	00000000 _gp
00000000 g       *ABS*	00000000 __alt_mem_ram
000002a4 g       *ABS*	00000000 __bss_end
00000248 g     F .text	00000004 alt_dcache_flush_all
00000288 g       *ABS*	00000000 __ram_rwdata_end
00000284 g       *ABS*	00000000 __ram_rodata_end
000002a4 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000214 g     F .text	00000034 altera_avalon_jtag_uart_write
0000028c g     O .bss	00000004 numchigh
00000290 g     O .bss	00000004 numclks
00000294 g     O .bss	00000004 numclow
00000020 g     F .text	0000003c _start
00000210 g     F .text	00000004 alt_sys_init
00000284 g       *ABS*	00000000 __ram_rwdata_start
00000274 g       *ABS*	00000000 __ram_rodata_start
000002a4 g       *ABS*	00000000 __alt_stack_base
0000028c g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000050 main
00000298 g     O .bss	00000004 alt_envp
00000274 g       *ABS*	00000000 __flash_rodata_start
000001f0 g     F .text	00000020 alt_irq_init
000002a0 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000288 g       *ABS*	00000000 _edata
000002a4 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001000 g       *ABS*	00000000 __alt_data_end
00000284 g     O .rwdata	00000004 uart
0000000c g       .entry	00000000 _exit
00000258 g     F .text	0000001c strlen
0000024c g     F .text	00000004 alt_icache_flush_all
000000ac g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a0a114 	ori	gp,gp,33412
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1080a314 	ori	r2,r2,652

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c0a914 	ori	r3,r3,676

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000ac0 	call	ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	000018c0 	call	18c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:

int main()
{ 
	int *LED = (int *)0x1870;
	int *SWITCH = (int *)0x1860;
  alt_putstr("Hello World!\n");
  5c:	01000034 	movhi	r4,0
//#define ADDR_LEDR ((volatile long *) 0x1870

long numclks,numchigh,numclow;

int main()
{ 
  60:	deffff04 	addi	sp,sp,-4
	int *LED = (int *)0x1870;
	int *SWITCH = (int *)0x1860;
  alt_putstr("Hello World!\n");
  64:	21009d04 	addi	r4,r4,628
//#define ADDR_LEDR ((volatile long *) 0x1870

long numclks,numchigh,numclow;

int main()
{ 
  68:	dfc00015 	stw	ra,0(sp)
	int *LED = (int *)0x1870;
	int *SWITCH = (int *)0x1860;
  alt_putstr("Hello World!\n");
  6c:	00001b80 	call	1b8 <alt_putstr>

  // Configure the timeout period to 1 second
  *(TimerTimeoutL)=0x4B40;
  70:	00d2d004 	movi	r3,19264
  74:	00860204 	movi	r2,6152
  78:	10c0000d 	sth	r3,0(r2)
  *(TimerTimeoutH)=0x004C;
  7c:	00c01304 	movi	r3,76
  80:	00860304 	movi	r2,6156
  84:	10c0000d 	sth	r3,0(r2)
  // Configure timer to start counting and to always continue
  *(TimerControl)=6;
  88:	00c00184 	movi	r3,6
  8c:	00860104 	movi	r2,6148
  90:	10c0000d 	sth	r3,0(r2)
  int i = 0;
  while (1)
  {

     *(TimerSnapshotL)=0; //write to timer to get snapshot
  94:	00860404 	movi	r2,6160
     numclow = *(TimerSnapshotL); //get low part
     numchigh = *(TimerSnapshotH); //get high part
  98:	00c60504 	movi	r3,6164
  *(TimerControl)=6;
  int i = 0;
  while (1)
  {

     *(TimerSnapshotL)=0; //write to timer to get snapshot
  9c:	1000000d 	sth	zero,0(r2)
     numclow = *(TimerSnapshotL); //get low part
  a0:	1100000b 	ldhu	r4,0(r2)
     numchigh = *(TimerSnapshotH); //get high part
  a4:	1900000b 	ldhu	r4,0(r3)
  a8:	003ffc06 	br	9c <main+0x40>

000000ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  ac:	deffff04 	addi	sp,sp,-4
  b0:	01000034 	movhi	r4,0
  b4:	01400034 	movhi	r5,0
  b8:	dfc00015 	stw	ra,0(sp)
  bc:	2100a104 	addi	r4,r4,644
  c0:	2940a204 	addi	r5,r5,648

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  c4:	2140061e 	bne	r4,r5,e0 <alt_load+0x34>
  c8:	01000034 	movhi	r4,0
  cc:	01400034 	movhi	r5,0
  d0:	21000804 	addi	r4,r4,32
  d4:	29400804 	addi	r5,r5,32
  d8:	2140121e 	bne	r4,r5,124 <alt_load+0x78>
  dc:	00000b06 	br	10c <alt_load+0x60>
  e0:	00c00034 	movhi	r3,0
  e4:	18c0a204 	addi	r3,r3,648
  e8:	1907c83a 	sub	r3,r3,r4
  ec:	0005883a 	mov	r2,zero
  {
    while( to != end )
  f0:	10fff526 	beq	r2,r3,c8 <alt_load+0x1c>
    {
      *to++ = *from++;
  f4:	114f883a 	add	r7,r2,r5
  f8:	39c00017 	ldw	r7,0(r7)
  fc:	110d883a 	add	r6,r2,r4
 100:	10800104 	addi	r2,r2,4
 104:	31c00015 	stw	r7,0(r6)
 108:	003ff906 	br	f0 <alt_load+0x44>
 10c:	01000034 	movhi	r4,0
 110:	01400034 	movhi	r5,0
 114:	21009d04 	addi	r4,r4,628
 118:	29409d04 	addi	r5,r5,628

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 11c:	2140101e 	bne	r4,r5,160 <alt_load+0xb4>
 120:	00000b06 	br	150 <alt_load+0xa4>
 124:	00c00034 	movhi	r3,0
 128:	18c00804 	addi	r3,r3,32
 12c:	1907c83a 	sub	r3,r3,r4
 130:	0005883a 	mov	r2,zero
  {
    while( to != end )
 134:	10fff526 	beq	r2,r3,10c <alt_load+0x60>
    {
      *to++ = *from++;
 138:	114f883a 	add	r7,r2,r5
 13c:	39c00017 	ldw	r7,0(r7)
 140:	110d883a 	add	r6,r2,r4
 144:	10800104 	addi	r2,r2,4
 148:	31c00015 	stw	r7,0(r6)
 14c:	003ff906 	br	134 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 150:	00002480 	call	248 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 154:	dfc00017 	ldw	ra,0(sp)
 158:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 15c:	000024c1 	jmpi	24c <alt_icache_flush_all>
 160:	00c00034 	movhi	r3,0
 164:	18c0a104 	addi	r3,r3,644
 168:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 16c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 170:	18bff726 	beq	r3,r2,150 <alt_load+0xa4>
    {
      *to++ = *from++;
 174:	114f883a 	add	r7,r2,r5
 178:	39c00017 	ldw	r7,0(r7)
 17c:	110d883a 	add	r6,r2,r4
 180:	10800104 	addi	r2,r2,4
 184:	31c00015 	stw	r7,0(r6)
 188:	003ff906 	br	170 <alt_load+0xc4>

0000018c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 18c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 190:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 194:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 198:	00001f00 	call	1f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 19c:	00002100 	call	210 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1a0:	d1a00517 	ldw	r6,-32748(gp)
 1a4:	d1600617 	ldw	r5,-32744(gp)
 1a8:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1ac:	dfc00017 	ldw	ra,0(sp)
 1b0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1b4:	000005c1 	jmpi	5c <main>

000001b8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1b8:	defffe04 	addi	sp,sp,-8
 1bc:	dc000015 	stw	r16,0(sp)
 1c0:	dfc00115 	stw	ra,4(sp)
 1c4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1c8:	00002580 	call	258 <strlen>
 1cc:	01000034 	movhi	r4,0
 1d0:	000f883a 	mov	r7,zero
 1d4:	100d883a 	mov	r6,r2
 1d8:	800b883a 	mov	r5,r16
 1dc:	2100a104 	addi	r4,r4,644
#else
    return fputs(str, stdout);
#endif
#endif
}
 1e0:	dfc00117 	ldw	ra,4(sp)
 1e4:	dc000017 	ldw	r16,0(sp)
 1e8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1ec:	00002141 	jmpi	214 <altera_avalon_jtag_uart_write>

000001f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1f0:	deffff04 	addi	sp,sp,-4
 1f4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 1f8:	00002500 	call	250 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1fc:	00800044 	movi	r2,1
 200:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 204:	dfc00017 	ldw	ra,0(sp)
 208:	dec00104 	addi	sp,sp,4
 20c:	f800283a 	ret

00000210 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 210:	f800283a 	ret

00000214 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 214:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 218:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 21c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 220:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 224:	2980072e 	bgeu	r5,r6,244 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 228:	38c00037 	ldwio	r3,0(r7)
 22c:	18ffffec 	andhi	r3,r3,65535
 230:	183ffc26 	beq	r3,zero,224 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 234:	28c00007 	ldb	r3,0(r5)
 238:	20c00035 	stwio	r3,0(r4)
 23c:	29400044 	addi	r5,r5,1
 240:	003ff806 	br	224 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 244:	f800283a 	ret

00000248 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 248:	f800283a 	ret

0000024c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 24c:	f800283a 	ret

00000250 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 250:	000170fa 	wrctl	ienable,zero
 254:	f800283a 	ret

00000258 <strlen>:
 258:	2005883a 	mov	r2,r4
 25c:	10c00007 	ldb	r3,0(r2)
 260:	18000226 	beq	r3,zero,26c <strlen+0x14>
 264:	10800044 	addi	r2,r2,1
 268:	003ffc06 	br	25c <strlen+0x4>
 26c:	1105c83a 	sub	r2,r2,r4
 270:	f800283a 	ret
