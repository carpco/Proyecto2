
CLOCK.elf:     file format elf32-littlenios2
CLOCK.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000c84 memsz 0x00000c84 flags r-x
    LOAD off    0x00001ca4 vaddr 0x00000ca4 paddr 0x00000ccc align 2**12
         filesz 0x00000028 memsz 0x00000028 flags rw-
    LOAD off    0x00001cf4 vaddr 0x00000cf4 paddr 0x00000cf4 align 2**12
         filesz 0x00000000 memsz 0x00000138 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000b24  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00000ca4  00000cf4  00001ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000028  00000ca4  00000ccc  00001ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000138  00000cf4  00000cf4  00001cf4  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00000e2c  00000e2c  00001ccc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001f8  00000000  00000000  00001cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001190  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008e0  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000008fb  00000000  00000000  00003958  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001ec  00000000  00000000  00004254  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a2b  00000000  00000000  00004440  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001f2  00000000  00000000  00004e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00005060  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00005070  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000061c6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000061c9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000061cd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000061ce  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000061d2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000061d6  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  000061da  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001d  00000000  00000000  000061e1  2**0
                  CONTENTS, READONLY
 26 .jdi          000035a5  00000000  00000000  000061fe  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005b976  00000000  00000000  000097a3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00000ca4 l    d  .rodata	00000000 .rodata
00000ca4 l    d  .rwdata	00000000 .rwdata
00000cf4 l    d  .bss	00000000 .bss
00000e2c l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CLOCK_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000001bc l     F .text	00000024 irqhandler
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000d28 g     O .bss	00000004 alt_instruction_exception_handler
00000cc0 g     O .rwdata	00000004 TIMER
00000cb8 g     O .rwdata	00000004 SSEG1
00000d0c g     O .bss	00000004 horas
00000bd0 g     F .text	0000002c alt_main
00000d2c g     O .bss	00000100 alt_irq
00000ccc g       *ABS*	00000000 __flash_rwdata_start
00000c28 g     F .text	00000008 altera_nios2_gen2_irq_init
00000d10 g     O .bss	00000004 minutos2
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000001e0 g     F .text	00000264 SDECO
00000d20 g     O .bss	00000004 alt_argv
00008ca4 g       *ABS*	00000000 _gp
00000d00 g     O .bss	00000004 aminutos
00000c30 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00000cb4 g     O .rwdata	00000004 SSEG2
00000000 g       *ABS*	00000000 __alt_mem_ram
00000cfc g     O .bss	00000004 aminutos2
00000cf8 g     O .bss	00000004 ahoras
00000a5c g     F .text	00000094 alt_irq_register
00000e2c g       *ABS*	00000000 __bss_end
00000cac g     O .rwdata	00000004 SWITCHES
00000d18 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000c20 g     F .text	00000004 alt_dcache_flush_all
00000ccc g       *ABS*	00000000 __ram_rwdata_end
00000ca4 g       *ABS*	00000000 __ram_rodata_end
000006a8 g     F .text	00000270 DECO
00000e2c g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000ca4 g     O .rwdata	00000004 BUTTON
00000cb0 g     O .rwdata	00000004 SSEG3
00000180 g     F .text	0000003c _start
00000c1c g     F .text	00000004 alt_sys_init
00000ca4 g       *ABS*	00000000 __ram_rwdata_start
00000ca4 g       *ABS*	00000000 __ram_rodata_start
00000e2c g       *ABS*	00000000 __alt_stack_base
00000cf4 g       *ABS*	00000000 __bss_start
00000918 g     F .text	00000144 main
00000d1c g     O .bss	00000004 alt_envp
00000ca8 g     O .rwdata	00000004 LEDS
00000ca4 g       *ABS*	00000000 __flash_rodata_start
00000bfc g     F .text	00000020 alt_irq_init
00000d24 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000cbc g     O .rwdata	00000004 SSEG0
00000d08 g     O .bss	00000004 horas2
00000d04 g     O .bss	00000004 alarma
00000ccc g       *ABS*	00000000 _edata
00000e2c g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000cf4 g     O .bss	00000004 ahoras2
00001000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000cc8 g     O .rwdata	00000004 uart
00000444 g     F .text	00000264 ADECO
0000000c g       .entry	00000000 _exit
00000c24 g     F .text	00000004 alt_icache_flush_all
00000cc4 g     O .rwdata	00000004 alt_priority_mask
00000d14 g     O .bss	00000004 minutos
00000af0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000034 	movhi	r16,0
 110:	84034b04 	addi	r16,r16,3372

  active = alt_irq_pending ();

  do
  {
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 150:	18c7883a 	add	r3,r3,r3
      i++;
 154:	10800044 	addi	r2,r2,1

    } while (1);
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a02117 	ldw	r2,-32636(gp)
 160:	10000426 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 164:	200b883a 	mov	r5,r4
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
 188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 18c:	d6a32914 	ori	gp,gp,36004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 194:	10833d14 	ori	r2,r2,3316

    movhi r3, %hi(__bss_end)
 198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 19c:	18c38b14 	ori	r3,r3,3628

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	0000af00 	call	af0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	0000bd00 	call	bd0 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <irqhandler>:
int aminutos2 = 0;
int ahoras = 0;
int ahoras2 = 0;

static void irqhandler (void * context, alt_u32 id){
minutos=minutos + 1;
 1bc:	d0a01c17 	ldw	r2,-32656(gp)
*LEDS=0xff;
 1c0:	00ffffc4 	movi	r3,-1
int aminutos2 = 0;
int ahoras = 0;
int ahoras2 = 0;

static void irqhandler (void * context, alt_u32 id){
minutos=minutos + 1;
 1c4:	10800044 	addi	r2,r2,1
 1c8:	d0a01c15 	stw	r2,-32656(gp)
*LEDS=0xff;
 1cc:	d0a00117 	ldw	r2,-32764(gp)
 1d0:	10c00005 	stb	r3,0(r2)
IOWR_16DIRECT(TIMER_BASE, 0, 0); // reset request
 1d4:	00860004 	movi	r2,6144
 1d8:	1000002d 	sthio	zero,0(r2)
 1dc:	f800283a 	ret

000001e0 <SDECO>:
}

void SDECO(){
	  switch (minutos){ /*deco Tiempo a 7-segmentos*/
 1e0:	d0a01c17 	ldw	r2,-32656(gp)
 1e4:	00c00284 	movi	r3,10
 1e8:	18802d36 	bltu	r3,r2,2a0 <SDECO+0xc0>
 1ec:	100490ba 	slli	r2,r2,2
 1f0:	00c00034 	movhi	r3,0
 1f4:	18c08204 	addi	r3,r3,520
 1f8:	10c5883a 	add	r2,r2,r3
 1fc:	10c00017 	ldw	r3,0(r2)
 200:	d0a00617 	ldw	r2,-32744(gp)
 204:	1800683a 	jmp	r3
 208:	00000234 	movhi	zero,8
 20c:	0000023c 	xorhi	zero,zero,8
 210:	00000248 	cmpgei	zero,zero,9
 214:	00000250 	cmplti	zero,zero,9
 218:	00000258 	cmpnei	zero,zero,9
 21c:	00000260 	cmpeqi	zero,zero,9
 220:	00000268 	cmpgeui	zero,zero,9
 224:	00000270 	cmpltui	zero,zero,9
 228:	00000278 	rdprs	zero,zero,9
 22c:	00000280 	call	28 <__flash_exceptions_start+0x8>
 230:	00000288 	cmpgei	zero,zero,10
		  case 0:
			*SSEG0 = 0x40;
 234:	00c01004 	movi	r3,64
 238:	00000106 	br	240 <SDECO+0x60>
			break;
		  case 1:
			*SSEG0 = 0xf9;
 23c:	00fffe44 	movi	r3,-7
 240:	10c00005 	stb	r3,0(r2)
			break;
 244:	00001606 	br	2a0 <SDECO+0xc0>
		  case 2:
			*SSEG0 = 0xa4;
 248:	00ffe904 	movi	r3,-92
 24c:	003ffc06 	br	240 <SDECO+0x60>
			break;
		  case 3:
			*SSEG0 = 0xb0;
 250:	00ffec04 	movi	r3,-80
 254:	003ffa06 	br	240 <SDECO+0x60>
			break;
		  case 4:
			*SSEG0 = 0x99;
 258:	00ffe644 	movi	r3,-103
 25c:	003ff806 	br	240 <SDECO+0x60>
			break;
		  case 5:
			*SSEG0 = 0x92;
 260:	00ffe484 	movi	r3,-110
 264:	003ff606 	br	240 <SDECO+0x60>
			break;
		  case 6:
			*SSEG0 = 0x02;
 268:	00c00084 	movi	r3,2
 26c:	003ff406 	br	240 <SDECO+0x60>
			break;
		  case 7:
			*SSEG0 = 0xf8;
 270:	00fffe04 	movi	r3,-8
 274:	003ff206 	br	240 <SDECO+0x60>
			break;
		  case 8:
			*SSEG0 = 0x00;
 278:	10000005 	stb	zero,0(r2)
			break;
 27c:	00000806 	br	2a0 <SDECO+0xc0>
		  case 9:
			*SSEG0 = 0x10;
 280:	00c00404 	movi	r3,16
 284:	003fee06 	br	240 <SDECO+0x60>
			break;
		  case 10:
			*SSEG0 = 0x40;
 288:	00c01004 	movi	r3,64
 28c:	10c00005 	stb	r3,0(r2)
			minutos = 0;
			minutos2 = minutos2 + 1;
 290:	d0a01b17 	ldw	r2,-32660(gp)
		  case 9:
			*SSEG0 = 0x10;
			break;
		  case 10:
			*SSEG0 = 0x40;
			minutos = 0;
 294:	d0201c15 	stw	zero,-32656(gp)
			minutos2 = minutos2 + 1;
 298:	10800044 	addi	r2,r2,1
 29c:	d0a01b15 	stw	r2,-32660(gp)
			break;
	  }
	  switch (minutos2){ /*deco Tiempo decenas a 7-segmentos*/
 2a0:	d0a01b17 	ldw	r2,-32660(gp)
 2a4:	00c00184 	movi	r3,6
 2a8:	18801e36 	bltu	r3,r2,324 <SDECO+0x144>
 2ac:	100490ba 	slli	r2,r2,2
 2b0:	00c00034 	movhi	r3,0
 2b4:	18c0b204 	addi	r3,r3,712
 2b8:	10c5883a 	add	r2,r2,r3
 2bc:	10c00017 	ldw	r3,0(r2)
 2c0:	d0a00517 	ldw	r2,-32748(gp)
 2c4:	1800683a 	jmp	r3
 2c8:	000002e4 	muli	zero,zero,11
 2cc:	000002ec 	andhi	zero,zero,11
 2d0:	000002f8 	rdprs	zero,zero,11
 2d4:	00000300 	call	30 <__flash_exceptions_start+0x10>
 2d8:	00000308 	cmpgei	zero,zero,12
 2dc:	00000310 	cmplti	zero,zero,12
 2e0:	00000318 	cmpnei	zero,zero,12
		  case 0:
			*SSEG1 = 0x40;
 2e4:	00c01004 	movi	r3,64
 2e8:	00000106 	br	2f0 <SDECO+0x110>
			break;
		  case 1:
			*SSEG1 = 0xf9;
 2ec:	00fffe44 	movi	r3,-7
 2f0:	10c00005 	stb	r3,0(r2)
			break;
 2f4:	00000b06 	br	324 <SDECO+0x144>
		  case 2:
			*SSEG1 = 0xa4;
 2f8:	00ffe904 	movi	r3,-92
 2fc:	003ffc06 	br	2f0 <SDECO+0x110>
			break;
		  case 3:
			*SSEG1 = 0xb0;
 300:	00ffec04 	movi	r3,-80
 304:	003ffa06 	br	2f0 <SDECO+0x110>
			break;
		  case 4:
			*SSEG1 = 0x99;
 308:	00ffe644 	movi	r3,-103
 30c:	003ff806 	br	2f0 <SDECO+0x110>
			break;
		  case 5:
			*SSEG1 = 0x92;
 310:	00ffe484 	movi	r3,-110
 314:	003ff606 	br	2f0 <SDECO+0x110>
			break;
		  case 6:
			*SSEG1 = 0x40;
 318:	00c01004 	movi	r3,64
 31c:	10c00005 	stb	r3,0(r2)
			minutos2 = 0;
 320:	d0201b15 	stw	zero,-32660(gp)
			break;
	  }
	  switch (horas){ /*deco Tiempo a 7-segmentos*/
 324:	d0a01a17 	ldw	r2,-32664(gp)
 328:	00c00284 	movi	r3,10
 32c:	18802d36 	bltu	r3,r2,3e4 <SDECO+0x204>
 330:	100490ba 	slli	r2,r2,2
 334:	00c00034 	movhi	r3,0
 338:	18c0d304 	addi	r3,r3,844
 33c:	10c5883a 	add	r2,r2,r3
 340:	10c00017 	ldw	r3,0(r2)
 344:	d0a00417 	ldw	r2,-32752(gp)
 348:	1800683a 	jmp	r3
 34c:	00000378 	rdprs	zero,zero,13
 350:	00000380 	call	38 <__flash_exceptions_start+0x18>
 354:	0000038c 	andi	zero,zero,14
 358:	00000394 	movui	zero,14
 35c:	0000039c 	xori	zero,zero,14
 360:	000003a4 	muli	zero,zero,14
 364:	000003ac 	andhi	zero,zero,14
 368:	000003b4 	movhi	zero,14
 36c:	000003bc 	xorhi	zero,zero,14
 370:	000003c4 	movi	zero,15
 374:	000003cc 	andi	zero,zero,15
	  		  case 0:
	  			*SSEG2 = 0x40;
 378:	00c01004 	movi	r3,64
 37c:	00000106 	br	384 <SDECO+0x1a4>
	  			break;
	  		  case 1:
	  			*SSEG2 = 0xf9;
 380:	00fffe44 	movi	r3,-7
 384:	10c00005 	stb	r3,0(r2)
	  			break;
 388:	00001606 	br	3e4 <SDECO+0x204>
	  		  case 2:
	  			*SSEG2 = 0xa4;
 38c:	00ffe904 	movi	r3,-92
 390:	003ffc06 	br	384 <SDECO+0x1a4>
	  			break;
	  		  case 3:
	  			*SSEG2 = 0xb0;
 394:	00ffec04 	movi	r3,-80
 398:	003ffa06 	br	384 <SDECO+0x1a4>
	  			break;
	  		  case 4:
	  			*SSEG2 = 0x99;
 39c:	00ffe644 	movi	r3,-103
 3a0:	003ff806 	br	384 <SDECO+0x1a4>
	  			break;
	  		  case 5:
	  			*SSEG2 = 0x92;
 3a4:	00ffe484 	movi	r3,-110
 3a8:	003ff606 	br	384 <SDECO+0x1a4>
	  			break;
	  		  case 6:
	  			*SSEG2 = 0x02;
 3ac:	00c00084 	movi	r3,2
 3b0:	003ff406 	br	384 <SDECO+0x1a4>
	  			break;
	  		  case 7:
	  			*SSEG2 = 0xf8;
 3b4:	00fffe04 	movi	r3,-8
 3b8:	003ff206 	br	384 <SDECO+0x1a4>
	  			break;
	  		  case 8:
	  			*SSEG2 = 0x00;
 3bc:	10000005 	stb	zero,0(r2)
	  			break;
 3c0:	00000806 	br	3e4 <SDECO+0x204>
	  		  case 9:
	  			*SSEG2 = 0x10;
 3c4:	00c00404 	movi	r3,16
 3c8:	003fee06 	br	384 <SDECO+0x1a4>
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
 3cc:	00c01004 	movi	r3,64
 3d0:	10c00005 	stb	r3,0(r2)
	  			horas = 0;
	  			horas2 = horas2 + 1;
 3d4:	d0a01917 	ldw	r2,-32668(gp)
	  		  case 9:
	  			*SSEG2 = 0x10;
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
	  			horas = 0;
 3d8:	d0201a15 	stw	zero,-32664(gp)
	  			horas2 = horas2 + 1;
 3dc:	10800044 	addi	r2,r2,1
 3e0:	d0a01915 	stw	r2,-32668(gp)
	  			break;
	  	  }
	  	  switch (horas2){ /*deco Tiempo decenas a 7-segmentos*/
 3e4:	d0a01917 	ldw	r2,-32668(gp)
 3e8:	00c00044 	movi	r3,1
 3ec:	10c00a26 	beq	r2,r3,418 <SDECO+0x238>
 3f0:	18800216 	blt	r3,r2,3fc <SDECO+0x21c>
 3f4:	10000626 	beq	r2,zero,410 <SDECO+0x230>
 3f8:	f800283a 	ret
 3fc:	00c00084 	movi	r3,2
 400:	10c00726 	beq	r2,r3,420 <SDECO+0x240>
 404:	00c000c4 	movi	r3,3
 408:	10c00926 	beq	r2,r3,430 <SDECO+0x250>
 40c:	f800283a 	ret
	  		  case 0:
	  			*SSEG3 = 0x40;
 410:	00c01004 	movi	r3,64
 414:	00000306 	br	424 <SDECO+0x244>
	  			break;
	  		  case 1:
	  			*SSEG3 = 0xf9;
 418:	00fffe44 	movi	r3,-7
 41c:	00000106 	br	424 <SDECO+0x244>
	  			break;
	  		  case 2:
	  			*SSEG3 = 0xa4;
 420:	00ffe904 	movi	r3,-92
 424:	d0a00317 	ldw	r2,-32756(gp)
 428:	10c00005 	stb	r3,0(r2)
	  			break;
 42c:	f800283a 	ret
	  		  case 3:
	  			*SSEG3 = 0x40;
 430:	d0a00317 	ldw	r2,-32756(gp)
 434:	00c01004 	movi	r3,64
 438:	10c00005 	stb	r3,0(r2)
	  			horas2 = 0;
 43c:	d0201915 	stw	zero,-32668(gp)
 440:	f800283a 	ret

00000444 <ADECO>:
	  			break;
	  	  }
	 }

void ADECO(){
	  switch (aminutos){ /*deco Tiempo a 7-segmentos*/
 444:	d0a01717 	ldw	r2,-32676(gp)
 448:	00c00284 	movi	r3,10
 44c:	18802d36 	bltu	r3,r2,504 <ADECO+0xc0>
 450:	100490ba 	slli	r2,r2,2
 454:	00c00034 	movhi	r3,0
 458:	18c11b04 	addi	r3,r3,1132
 45c:	10c5883a 	add	r2,r2,r3
 460:	10c00017 	ldw	r3,0(r2)
 464:	d0a00617 	ldw	r2,-32744(gp)
 468:	1800683a 	jmp	r3
 46c:	00000498 	cmpnei	zero,zero,18
 470:	000004a0 	cmpeqi	zero,zero,18
 474:	000004ac 	andhi	zero,zero,18
 478:	000004b4 	movhi	zero,18
 47c:	000004bc 	xorhi	zero,zero,18
 480:	000004c4 	movi	zero,19
 484:	000004cc 	andi	zero,zero,19
 488:	000004d4 	movui	zero,19
 48c:	000004dc 	xori	zero,zero,19
 490:	000004e4 	muli	zero,zero,19
 494:	000004ec 	andhi	zero,zero,19
		  case 0:
			*SSEG0 = 0x40;
 498:	00c01004 	movi	r3,64
 49c:	00000106 	br	4a4 <ADECO+0x60>
			break;
		  case 1:
			*SSEG0 = 0xf9;
 4a0:	00fffe44 	movi	r3,-7
 4a4:	10c00005 	stb	r3,0(r2)
			break;
 4a8:	00001606 	br	504 <ADECO+0xc0>
		  case 2:
			*SSEG0 = 0xa4;
 4ac:	00ffe904 	movi	r3,-92
 4b0:	003ffc06 	br	4a4 <ADECO+0x60>
			break;
		  case 3:
			*SSEG0 = 0xb0;
 4b4:	00ffec04 	movi	r3,-80
 4b8:	003ffa06 	br	4a4 <ADECO+0x60>
			break;
		  case 4:
			*SSEG0 = 0x99;
 4bc:	00ffe644 	movi	r3,-103
 4c0:	003ff806 	br	4a4 <ADECO+0x60>
			break;
		  case 5:
			*SSEG0 = 0x92;
 4c4:	00ffe484 	movi	r3,-110
 4c8:	003ff606 	br	4a4 <ADECO+0x60>
			break;
		  case 6:
			*SSEG0 = 0x02;
 4cc:	00c00084 	movi	r3,2
 4d0:	003ff406 	br	4a4 <ADECO+0x60>
			break;
		  case 7:
			*SSEG0 = 0xf8;
 4d4:	00fffe04 	movi	r3,-8
 4d8:	003ff206 	br	4a4 <ADECO+0x60>
			break;
		  case 8:
			*SSEG0 = 0x00;
 4dc:	10000005 	stb	zero,0(r2)
			break;
 4e0:	00000806 	br	504 <ADECO+0xc0>
		  case 9:
			*SSEG0 = 0x10;
 4e4:	00c00404 	movi	r3,16
 4e8:	003fee06 	br	4a4 <ADECO+0x60>
			break;
		  case 10:
			*SSEG0 = 0x40;
 4ec:	00c01004 	movi	r3,64
 4f0:	10c00005 	stb	r3,0(r2)
			aminutos = 0;
			aminutos2 = aminutos2 + 1;
 4f4:	d0a01617 	ldw	r2,-32680(gp)
		  case 9:
			*SSEG0 = 0x10;
			break;
		  case 10:
			*SSEG0 = 0x40;
			aminutos = 0;
 4f8:	d0201715 	stw	zero,-32676(gp)
			aminutos2 = aminutos2 + 1;
 4fc:	10800044 	addi	r2,r2,1
 500:	d0a01615 	stw	r2,-32680(gp)
			break;
	  }
	  switch (aminutos2){ /*deco Tiempo decenas a 7-segmentos*/
 504:	d0a01617 	ldw	r2,-32680(gp)
 508:	00c00184 	movi	r3,6
 50c:	18801e36 	bltu	r3,r2,588 <ADECO+0x144>
 510:	100490ba 	slli	r2,r2,2
 514:	00c00034 	movhi	r3,0
 518:	18c14b04 	addi	r3,r3,1324
 51c:	10c5883a 	add	r2,r2,r3
 520:	10c00017 	ldw	r3,0(r2)
 524:	d0a00517 	ldw	r2,-32748(gp)
 528:	1800683a 	jmp	r3
 52c:	00000548 	cmpgei	zero,zero,21
 530:	00000550 	cmplti	zero,zero,21
 534:	0000055c 	xori	zero,zero,21
 538:	00000564 	muli	zero,zero,21
 53c:	0000056c 	andhi	zero,zero,21
 540:	00000574 	movhi	zero,21
 544:	0000057c 	xorhi	zero,zero,21
		  case 0:
			*SSEG1 = 0x40;
 548:	00c01004 	movi	r3,64
 54c:	00000106 	br	554 <ADECO+0x110>
			break;
		  case 1:
			*SSEG1 = 0xf9;
 550:	00fffe44 	movi	r3,-7
 554:	10c00005 	stb	r3,0(r2)
			break;
 558:	00000b06 	br	588 <ADECO+0x144>
		  case 2:
			*SSEG1 = 0xa4;
 55c:	00ffe904 	movi	r3,-92
 560:	003ffc06 	br	554 <ADECO+0x110>
			break;
		  case 3:
			*SSEG1 = 0xb0;
 564:	00ffec04 	movi	r3,-80
 568:	003ffa06 	br	554 <ADECO+0x110>
			break;
		  case 4:
			*SSEG1 = 0x99;
 56c:	00ffe644 	movi	r3,-103
 570:	003ff806 	br	554 <ADECO+0x110>
			break;
		  case 5:
			*SSEG1 = 0x92;
 574:	00ffe484 	movi	r3,-110
 578:	003ff606 	br	554 <ADECO+0x110>
			break;
		  case 6:
			*SSEG1 = 0x40;
 57c:	00c01004 	movi	r3,64
 580:	10c00005 	stb	r3,0(r2)
			aminutos2 = 0;
 584:	d0201615 	stw	zero,-32680(gp)
			break;
	  }
	  switch (ahoras){ /*deco Tiempo a 7-segmentos*/
 588:	d0a01517 	ldw	r2,-32684(gp)
 58c:	00c00284 	movi	r3,10
 590:	18802d36 	bltu	r3,r2,648 <ADECO+0x204>
 594:	100490ba 	slli	r2,r2,2
 598:	00c00034 	movhi	r3,0
 59c:	18c16c04 	addi	r3,r3,1456
 5a0:	10c5883a 	add	r2,r2,r3
 5a4:	10c00017 	ldw	r3,0(r2)
 5a8:	d0a00417 	ldw	r2,-32752(gp)
 5ac:	1800683a 	jmp	r3
 5b0:	000005dc 	xori	zero,zero,23
 5b4:	000005e4 	muli	zero,zero,23
 5b8:	000005f0 	cmpltui	zero,zero,23
 5bc:	000005f8 	rdprs	zero,zero,23
 5c0:	00000600 	call	60 <__flash_exceptions_start+0x40>
 5c4:	00000608 	cmpgei	zero,zero,24
 5c8:	00000610 	cmplti	zero,zero,24
 5cc:	00000618 	cmpnei	zero,zero,24
 5d0:	00000620 	cmpeqi	zero,zero,24
 5d4:	00000628 	cmpgeui	zero,zero,24
 5d8:	00000630 	cmpltui	zero,zero,24
	  		  case 0:
	  			*SSEG2 = 0x40;
 5dc:	00c01004 	movi	r3,64
 5e0:	00000106 	br	5e8 <ADECO+0x1a4>
	  			break;
	  		  case 1:
	  			*SSEG2 = 0xf9;
 5e4:	00fffe44 	movi	r3,-7
 5e8:	10c00005 	stb	r3,0(r2)
	  			break;
 5ec:	00001606 	br	648 <ADECO+0x204>
	  		  case 2:
	  			*SSEG2 = 0xa4;
 5f0:	00ffe904 	movi	r3,-92
 5f4:	003ffc06 	br	5e8 <ADECO+0x1a4>
	  			break;
	  		  case 3:
	  			*SSEG2 = 0xb0;
 5f8:	00ffec04 	movi	r3,-80
 5fc:	003ffa06 	br	5e8 <ADECO+0x1a4>
	  			break;
	  		  case 4:
	  			*SSEG2 = 0x99;
 600:	00ffe644 	movi	r3,-103
 604:	003ff806 	br	5e8 <ADECO+0x1a4>
	  			break;
	  		  case 5:
	  			*SSEG2 = 0x92;
 608:	00ffe484 	movi	r3,-110
 60c:	003ff606 	br	5e8 <ADECO+0x1a4>
	  			break;
	  		  case 6:
	  			*SSEG2 = 0x02;
 610:	00c00084 	movi	r3,2
 614:	003ff406 	br	5e8 <ADECO+0x1a4>
	  			break;
	  		  case 7:
	  			*SSEG2 = 0xf8;
 618:	00fffe04 	movi	r3,-8
 61c:	003ff206 	br	5e8 <ADECO+0x1a4>
	  			break;
	  		  case 8:
	  			*SSEG2 = 0x00;
 620:	10000005 	stb	zero,0(r2)
	  			break;
 624:	00000806 	br	648 <ADECO+0x204>
	  		  case 9:
	  			*SSEG2 = 0x10;
 628:	00c00404 	movi	r3,16
 62c:	003fee06 	br	5e8 <ADECO+0x1a4>
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
 630:	00c01004 	movi	r3,64
 634:	10c00005 	stb	r3,0(r2)
	  			ahoras = 0;
	  			ahoras2 = ahoras2 + 1;
 638:	d0a01417 	ldw	r2,-32688(gp)
	  		  case 9:
	  			*SSEG2 = 0x10;
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
	  			ahoras = 0;
 63c:	d0201515 	stw	zero,-32684(gp)
	  			ahoras2 = ahoras2 + 1;
 640:	10800044 	addi	r2,r2,1
 644:	d0a01415 	stw	r2,-32688(gp)
	  			break;
	  	  }
	  	  switch (ahoras2){ /*deco Tiempo decenas a 7-segmentos*/
 648:	d0a01417 	ldw	r2,-32688(gp)
 64c:	00c00044 	movi	r3,1
 650:	10c00a26 	beq	r2,r3,67c <ADECO+0x238>
 654:	18800216 	blt	r3,r2,660 <ADECO+0x21c>
 658:	10000626 	beq	r2,zero,674 <ADECO+0x230>
 65c:	f800283a 	ret
 660:	00c00084 	movi	r3,2
 664:	10c00726 	beq	r2,r3,684 <ADECO+0x240>
 668:	00c000c4 	movi	r3,3
 66c:	10c00926 	beq	r2,r3,694 <ADECO+0x250>
 670:	f800283a 	ret
	  		  case 0:
	  			*SSEG3 = 0x40;
 674:	00c01004 	movi	r3,64
 678:	00000306 	br	688 <ADECO+0x244>
	  			break;
	  		  case 1:
	  			*SSEG3 = 0xf9;
 67c:	00fffe44 	movi	r3,-7
 680:	00000106 	br	688 <ADECO+0x244>
	  			break;
	  		  case 2:
	  			*SSEG3 = 0xa4;
 684:	00ffe904 	movi	r3,-92
 688:	d0a00317 	ldw	r2,-32756(gp)
 68c:	10c00005 	stb	r3,0(r2)
	  			break;
 690:	f800283a 	ret
	  		  case 3:
	  			*SSEG3 = 0x40;
 694:	d0a00317 	ldw	r2,-32756(gp)
 698:	00c01004 	movi	r3,64
 69c:	10c00005 	stb	r3,0(r2)
	  			ahoras2 = 0;
 6a0:	d0201415 	stw	zero,-32688(gp)
 6a4:	f800283a 	ret

000006a8 <DECO>:
	  			break;
	  	  }
	 }

void DECO(){
	  switch (minutos){ /*deco Tiempo a 7-segmentos*/
 6a8:	d0a01c17 	ldw	r2,-32656(gp)
 6ac:	00c00284 	movi	r3,10
 6b0:	18802d36 	bltu	r3,r2,768 <DECO+0xc0>
 6b4:	100490ba 	slli	r2,r2,2
 6b8:	00c00034 	movhi	r3,0
 6bc:	18c1b404 	addi	r3,r3,1744
 6c0:	10c5883a 	add	r2,r2,r3
 6c4:	10c00017 	ldw	r3,0(r2)
 6c8:	d0a00617 	ldw	r2,-32744(gp)
 6cc:	1800683a 	jmp	r3
 6d0:	000006fc 	xorhi	zero,zero,27
 6d4:	00000704 	movi	zero,28
 6d8:	00000710 	cmplti	zero,zero,28
 6dc:	00000718 	cmpnei	zero,zero,28
 6e0:	00000720 	cmpeqi	zero,zero,28
 6e4:	00000728 	cmpgeui	zero,zero,28
 6e8:	00000730 	cmpltui	zero,zero,28
 6ec:	00000738 	rdprs	zero,zero,28
 6f0:	00000740 	call	74 <__flash_exceptions_start+0x54>
 6f4:	00000748 	cmpgei	zero,zero,29
 6f8:	00000750 	cmplti	zero,zero,29
		  case 0:
			*SSEG0 = 0x40;
 6fc:	00c01004 	movi	r3,64
 700:	00000106 	br	708 <DECO+0x60>
			break;
		  case 1:
			*SSEG0 = 0xf9;
 704:	00fffe44 	movi	r3,-7
 708:	10c00005 	stb	r3,0(r2)
			break;
 70c:	00001606 	br	768 <DECO+0xc0>
		  case 2:
			*SSEG0 = 0xa4;
 710:	00ffe904 	movi	r3,-92
 714:	003ffc06 	br	708 <DECO+0x60>
			break;
		  case 3:
			*SSEG0 = 0xb0;
 718:	00ffec04 	movi	r3,-80
 71c:	003ffa06 	br	708 <DECO+0x60>
			break;
		  case 4:
			*SSEG0 = 0x99;
 720:	00ffe644 	movi	r3,-103
 724:	003ff806 	br	708 <DECO+0x60>
			break;
		  case 5:
			*SSEG0 = 0x92;
 728:	00ffe484 	movi	r3,-110
 72c:	003ff606 	br	708 <DECO+0x60>
			break;
		  case 6:
			*SSEG0 = 0x02;
 730:	00c00084 	movi	r3,2
 734:	003ff406 	br	708 <DECO+0x60>
			break;
		  case 7:
			*SSEG0 = 0xf8;
 738:	00fffe04 	movi	r3,-8
 73c:	003ff206 	br	708 <DECO+0x60>
			break;
		  case 8:
			*SSEG0 = 0x00;
 740:	10000005 	stb	zero,0(r2)
			break;
 744:	00000806 	br	768 <DECO+0xc0>
		  case 9:
			*SSEG0 = 0x10;
 748:	00c00404 	movi	r3,16
 74c:	003fee06 	br	708 <DECO+0x60>
			break;
		  case 10:
			*SSEG0 = 0x40;
 750:	00c01004 	movi	r3,64
 754:	10c00005 	stb	r3,0(r2)
			minutos = 0;
			minutos2 = minutos2 + 1;
 758:	d0a01b17 	ldw	r2,-32660(gp)
		  case 9:
			*SSEG0 = 0x10;
			break;
		  case 10:
			*SSEG0 = 0x40;
			minutos = 0;
 75c:	d0201c15 	stw	zero,-32656(gp)
			minutos2 = minutos2 + 1;
 760:	10800044 	addi	r2,r2,1
 764:	d0a01b15 	stw	r2,-32660(gp)
			break;
	  }
	  switch (minutos2){ /*deco Tiempo decenas a 7-segmentos*/
 768:	d0a01b17 	ldw	r2,-32660(gp)
 76c:	00c00184 	movi	r3,6
 770:	18802136 	bltu	r3,r2,7f8 <DECO+0x150>
 774:	100490ba 	slli	r2,r2,2
 778:	00c00034 	movhi	r3,0
 77c:	18c1e404 	addi	r3,r3,1936
 780:	10c5883a 	add	r2,r2,r3
 784:	10c00017 	ldw	r3,0(r2)
 788:	d0a00517 	ldw	r2,-32748(gp)
 78c:	1800683a 	jmp	r3
 790:	000007ac 	andhi	zero,zero,30
 794:	000007b4 	movhi	zero,30
 798:	000007c0 	call	7c <__flash_exceptions_start+0x5c>
 79c:	000007c8 	cmpgei	zero,zero,31
 7a0:	000007d0 	cmplti	zero,zero,31
 7a4:	000007d8 	cmpnei	zero,zero,31
 7a8:	000007e0 	cmpeqi	zero,zero,31
		  case 0:
			*SSEG1 = 0x40;
 7ac:	00c01004 	movi	r3,64
 7b0:	00000106 	br	7b8 <DECO+0x110>
			break;
		  case 1:
			*SSEG1 = 0xf9;
 7b4:	00fffe44 	movi	r3,-7
 7b8:	10c00005 	stb	r3,0(r2)
			break;
 7bc:	00000e06 	br	7f8 <DECO+0x150>
		  case 2:
			*SSEG1 = 0xa4;
 7c0:	00ffe904 	movi	r3,-92
 7c4:	003ffc06 	br	7b8 <DECO+0x110>
			break;
		  case 3:
			*SSEG1 = 0xb0;
 7c8:	00ffec04 	movi	r3,-80
 7cc:	003ffa06 	br	7b8 <DECO+0x110>
			break;
		  case 4:
			*SSEG1 = 0x99;
 7d0:	00ffe644 	movi	r3,-103
 7d4:	003ff806 	br	7b8 <DECO+0x110>
			break;
		  case 5:
			*SSEG1 = 0x92;
 7d8:	00ffe484 	movi	r3,-110
 7dc:	003ff606 	br	7b8 <DECO+0x110>
			break;
		  case 6:
			*SSEG1 = 0x40;
 7e0:	00c01004 	movi	r3,64
 7e4:	10c00005 	stb	r3,0(r2)
			minutos2 = 0;
			horas=horas+1;
 7e8:	d0a01a17 	ldw	r2,-32664(gp)
		  case 5:
			*SSEG1 = 0x92;
			break;
		  case 6:
			*SSEG1 = 0x40;
			minutos2 = 0;
 7ec:	d0201b15 	stw	zero,-32660(gp)
			horas=horas+1;
 7f0:	10800044 	addi	r2,r2,1
 7f4:	d0a01a15 	stw	r2,-32664(gp)
			break;
	  }
	  switch (horas){ /*deco Tiempo a 7-segmentos*/
 7f8:	d0a01a17 	ldw	r2,-32664(gp)
 7fc:	00c00284 	movi	r3,10
 800:	18802d36 	bltu	r3,r2,8b8 <DECO+0x210>
 804:	100490ba 	slli	r2,r2,2
 808:	00c00034 	movhi	r3,0
 80c:	18c20804 	addi	r3,r3,2080
 810:	10c5883a 	add	r2,r2,r3
 814:	10c00017 	ldw	r3,0(r2)
 818:	d0a00417 	ldw	r2,-32752(gp)
 81c:	1800683a 	jmp	r3
 820:	0000084c 	andi	zero,zero,33
 824:	00000854 	movui	zero,33
 828:	00000860 	cmpeqi	zero,zero,33
 82c:	00000868 	cmpgeui	zero,zero,33
 830:	00000870 	cmpltui	zero,zero,33
 834:	00000878 	rdprs	zero,zero,33
 838:	00000880 	call	88 <__flash_exceptions_start+0x68>
 83c:	00000888 	cmpgei	zero,zero,34
 840:	00000890 	cmplti	zero,zero,34
 844:	00000898 	cmpnei	zero,zero,34
 848:	000008a0 	cmpeqi	zero,zero,34
	  		  case 0:
	  			*SSEG2 = 0x40;
 84c:	00c01004 	movi	r3,64
 850:	00000106 	br	858 <DECO+0x1b0>
	  			break;
	  		  case 1:
	  			*SSEG2 = 0xf9;
 854:	00fffe44 	movi	r3,-7
 858:	10c00005 	stb	r3,0(r2)
	  			break;
 85c:	00001606 	br	8b8 <DECO+0x210>
	  		  case 2:
	  			*SSEG2 = 0xa4;
 860:	00ffe904 	movi	r3,-92
 864:	003ffc06 	br	858 <DECO+0x1b0>
	  			break;
	  		  case 3:
	  			*SSEG2 = 0xb0;
 868:	00ffec04 	movi	r3,-80
 86c:	003ffa06 	br	858 <DECO+0x1b0>
	  			break;
	  		  case 4:
	  			*SSEG2 = 0x99;
 870:	00ffe644 	movi	r3,-103
 874:	003ff806 	br	858 <DECO+0x1b0>
	  			break;
	  		  case 5:
	  			*SSEG2 = 0x92;
 878:	00ffe484 	movi	r3,-110
 87c:	003ff606 	br	858 <DECO+0x1b0>
	  			break;
	  		  case 6:
	  			*SSEG2 = 0x02;
 880:	00c00084 	movi	r3,2
 884:	003ff406 	br	858 <DECO+0x1b0>
	  			break;
	  		  case 7:
	  			*SSEG2 = 0xf8;
 888:	00fffe04 	movi	r3,-8
 88c:	003ff206 	br	858 <DECO+0x1b0>
	  			break;
	  		  case 8:
	  			*SSEG2 = 0x00;
 890:	10000005 	stb	zero,0(r2)
	  			break;
 894:	00000806 	br	8b8 <DECO+0x210>
	  		  case 9:
	  			*SSEG2 = 0x10;
 898:	00c00404 	movi	r3,16
 89c:	003fee06 	br	858 <DECO+0x1b0>
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
 8a0:	00c01004 	movi	r3,64
 8a4:	10c00005 	stb	r3,0(r2)
	  			horas = 0;
	  			horas2 = horas2 + 1;
 8a8:	d0a01917 	ldw	r2,-32668(gp)
	  		  case 9:
	  			*SSEG2 = 0x10;
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
	  			horas = 0;
 8ac:	d0201a15 	stw	zero,-32664(gp)
	  			horas2 = horas2 + 1;
 8b0:	10800044 	addi	r2,r2,1
 8b4:	d0a01915 	stw	r2,-32668(gp)
	  			break;
	  	  }
	  	  switch (horas2){ /*deco Tiempo decenas a 7-segmentos*/
 8b8:	d0a01917 	ldw	r2,-32668(gp)
 8bc:	00c00044 	movi	r3,1
 8c0:	10c00a26 	beq	r2,r3,8ec <DECO+0x244>
 8c4:	18800216 	blt	r3,r2,8d0 <DECO+0x228>
 8c8:	10000626 	beq	r2,zero,8e4 <DECO+0x23c>
 8cc:	f800283a 	ret
 8d0:	00c00084 	movi	r3,2
 8d4:	10c00726 	beq	r2,r3,8f4 <DECO+0x24c>
 8d8:	00c000c4 	movi	r3,3
 8dc:	10c00926 	beq	r2,r3,904 <DECO+0x25c>
 8e0:	f800283a 	ret
	  		  case 0:
	  			*SSEG3 = 0x40;
 8e4:	00c01004 	movi	r3,64
 8e8:	00000306 	br	8f8 <DECO+0x250>
	  			break;
	  		  case 1:
	  			*SSEG3 = 0xf9;
 8ec:	00fffe44 	movi	r3,-7
 8f0:	00000106 	br	8f8 <DECO+0x250>
	  			break;
	  		  case 2:
	  			*SSEG3 = 0xa4;
 8f4:	00ffe904 	movi	r3,-92
 8f8:	d0a00317 	ldw	r2,-32756(gp)
 8fc:	10c00005 	stb	r3,0(r2)
	  			break;
 900:	f800283a 	ret
	  		  case 3:
	  			*SSEG3 = 0x40;
 904:	d0a00317 	ldw	r2,-32756(gp)
 908:	00c01004 	movi	r3,64
 90c:	10c00005 	stb	r3,0(r2)
	  			horas2 = 0;
 910:	d0201915 	stw	zero,-32668(gp)
 914:	f800283a 	ret

00000918 <main>:
	  	  }
	 }

int main()
{
  alt_irq_register(TIMER_IRQ,NULL,(void*)irqhandler);
 918:	01800034 	movhi	r6,0
	  			break;
	  	  }
	 }

int main()
{
 91c:	defffb04 	addi	sp,sp,-20
  alt_irq_register(TIMER_IRQ,NULL,(void*)irqhandler);
 920:	31806f04 	addi	r6,r6,444
 924:	000b883a 	mov	r5,zero
 928:	0009883a 	mov	r4,zero
	  			break;
	  	  }
	 }

int main()
{
 92c:	dcc00315 	stw	r19,12(sp)
 930:	dc800215 	stw	r18,8(sp)
 934:	dc400115 	stw	r17,4(sp)
 938:	dc000015 	stw	r16,0(sp)
 93c:	dfc00415 	stw	ra,16(sp)
  alt_irq_register(TIMER_IRQ,NULL,(void*)irqhandler);
  while (1){
	  if(*SWITCHES==0x6){
 940:	04400184 	movi	r17,6
	  	  }
	 }

int main()
{
  alt_irq_register(TIMER_IRQ,NULL,(void*)irqhandler);
 944:	0000a5c0 	call	a5c <alt_irq_register>
		  else if(*BUTTON==0xb){
			  minutos=minutos+1;
			  SDECO();
		  }
	  }
	  else if(*SWITCHES==0x5){
 948:	04800144 	movi	r18,5
 94c:	04000044 	movi	r16,1
			  minutos = minutos + 1;
			  DECO();
		  }
		  else{
		  DECO();
		  if(*BUTTON==0xe){
 950:	04c00384 	movi	r19,14

int main()
{
  alt_irq_register(TIMER_IRQ,NULL,(void*)irqhandler);
  while (1){
	  if(*SWITCHES==0x6){
 954:	d0a00217 	ldw	r2,-32760(gp)
 958:	10800007 	ldb	r2,0(r2)
 95c:	1440101e 	bne	r2,r17,9a0 <main+0x88>
		  SDECO();
 960:	00001e00 	call	1e0 <SDECO>
		  if(*BUTTON==0x7){
 964:	d0a00017 	ldw	r2,-32768(gp)
 968:	00c001c4 	movi	r3,7
 96c:	10800007 	ldb	r2,0(r2)
 970:	10c0041e 	bne	r2,r3,984 <main+0x6c>
			  horas=horas+1;
 974:	d0a01a17 	ldw	r2,-32664(gp)
 978:	10800044 	addi	r2,r2,1
 97c:	d0a01a15 	stw	r2,-32664(gp)
 980:	00000506 	br	998 <main+0x80>
			  SDECO();
		  }
		  else if(*BUTTON==0xb){
 984:	00c002c4 	movi	r3,11
 988:	10fff21e 	bne	r2,r3,954 <main+0x3c>
			  minutos=minutos+1;
 98c:	d0a01c17 	ldw	r2,-32656(gp)
 990:	10800044 	addi	r2,r2,1
 994:	d0a01c15 	stw	r2,-32656(gp)
			  SDECO();
 998:	00001e00 	call	1e0 <SDECO>
 99c:	003fed06 	br	954 <main+0x3c>
		  }
	  }
	  else if(*SWITCHES==0x5){
 9a0:	1480111e 	bne	r2,r18,9e8 <main+0xd0>
		  alarma = 1;
 9a4:	d4201815 	stw	r16,-32672(gp)
		  ADECO();
 9a8:	00004440 	call	444 <ADECO>
		  if(*BUTTON==0x7){
 9ac:	d0a00017 	ldw	r2,-32768(gp)
 9b0:	00c001c4 	movi	r3,7
 9b4:	10800007 	ldb	r2,0(r2)
 9b8:	10c0041e 	bne	r2,r3,9cc <main+0xb4>
		  			  ahoras=ahoras+1;
 9bc:	d0a01517 	ldw	r2,-32684(gp)
 9c0:	10800044 	addi	r2,r2,1
 9c4:	d0a01515 	stw	r2,-32684(gp)
 9c8:	00000506 	br	9e0 <main+0xc8>
		  			  ADECO();
		  		  }
		  		  else if(*BUTTON==0xb){
 9cc:	00c002c4 	movi	r3,11
 9d0:	10ffe01e 	bne	r2,r3,954 <main+0x3c>
		  			  aminutos=aminutos+1;
 9d4:	d0a01717 	ldw	r2,-32676(gp)
 9d8:	10800044 	addi	r2,r2,1
 9dc:	d0a01715 	stw	r2,-32676(gp)
		  			  ADECO();
 9e0:	00004440 	call	444 <ADECO>
 9e4:	003fdb06 	br	954 <main+0x3c>
		  		  }
	  }
	  else{
		  if(alarma==1&&horas2==ahoras2&&horas==ahoras&&minutos2==aminutos2&&minutos==aminutos){
 9e8:	d0a01817 	ldw	r2,-32672(gp)
 9ec:	1400141e 	bne	r2,r16,a40 <main+0x128>
 9f0:	d0a01417 	ldw	r2,-32688(gp)
 9f4:	d0e01917 	ldw	r3,-32668(gp)
 9f8:	1880111e 	bne	r3,r2,a40 <main+0x128>
 9fc:	d0a01517 	ldw	r2,-32684(gp)
 a00:	d0e01a17 	ldw	r3,-32664(gp)
 a04:	18800e1e 	bne	r3,r2,a40 <main+0x128>
 a08:	d0a01617 	ldw	r2,-32680(gp)
 a0c:	d0e01b17 	ldw	r3,-32660(gp)
 a10:	18800b1e 	bne	r3,r2,a40 <main+0x128>
 a14:	d0a01717 	ldw	r2,-32676(gp)
 a18:	d0e01c17 	ldw	r3,-32656(gp)
 a1c:	1880081e 	bne	r3,r2,a40 <main+0x128>
			  *LEDS=0xff;
 a20:	d0a00117 	ldw	r2,-32764(gp)
 a24:	00ffffc4 	movi	r3,-1
 a28:	10c00005 	stb	r3,0(r2)
			  minutos = minutos + 1;
 a2c:	d0a01c17 	ldw	r2,-32656(gp)
 a30:	10800044 	addi	r2,r2,1
 a34:	d0a01c15 	stw	r2,-32656(gp)
			  DECO();
 a38:	00006a80 	call	6a8 <DECO>
 a3c:	003fc506 	br	954 <main+0x3c>
		  }
		  else{
		  DECO();
 a40:	00006a80 	call	6a8 <DECO>
		  if(*BUTTON==0xe){
 a44:	d0a00017 	ldw	r2,-32768(gp)
 a48:	10800007 	ldb	r2,0(r2)
 a4c:	14ffc11e 	bne	r2,r19,954 <main+0x3c>
		  	*LEDS=0x00;
 a50:	d0a00117 	ldw	r2,-32764(gp)
 a54:	10000005 	stb	zero,0(r2)
 a58:	003fbe06 	br	954 <main+0x3c>

00000a5c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
 a5c:	008007c4 	movi	r2,31
 a60:	11002136 	bltu	r2,r4,ae8 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a64:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a68:	00ffff84 	movi	r3,-2
 a6c:	38c4703a 	and	r2,r7,r3
 a70:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
 a74:	200490fa 	slli	r2,r4,3
 a78:	02000034 	movhi	r8,0
 a7c:	42034b04 	addi	r8,r8,3372
 a80:	4085883a 	add	r2,r8,r2
 a84:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
 a88:	11400115 	stw	r5,4(r2)
 a8c:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 a90:	30000726 	beq	r6,zero,ab0 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a94:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a98:	28c6703a 	and	r3,r5,r3
 a9c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 aa0:	d0e01d17 	ldw	r3,-32652(gp)
 aa4:	1104983a 	sll	r2,r2,r4
 aa8:	10c4b03a 	or	r2,r2,r3
 aac:	00000706 	br	acc <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 ab0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 ab4:	28c6703a 	and	r3,r5,r3
 ab8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 abc:	1104983a 	sll	r2,r2,r4
 ac0:	d0e01d17 	ldw	r3,-32652(gp)
 ac4:	0084303a 	nor	r2,zero,r2
 ac8:	10c4703a 	and	r2,r2,r3
 acc:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 ad0:	d0a01d17 	ldw	r2,-32652(gp)
 ad4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 ad8:	2801703a 	wrctl	status,r5
 adc:	3801703a 	wrctl	status,r7
 ae0:	0005883a 	mov	r2,zero
 ae4:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
 ae8:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
 aec:	f800283a 	ret

00000af0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 af0:	deffff04 	addi	sp,sp,-4
 af4:	01000034 	movhi	r4,0
 af8:	01400034 	movhi	r5,0
 afc:	dfc00015 	stw	ra,0(sp)
 b00:	21032904 	addi	r4,r4,3236
 b04:	29433304 	addi	r5,r5,3276

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 b08:	2140061e 	bne	r4,r5,b24 <alt_load+0x34>
 b0c:	01000034 	movhi	r4,0
 b10:	01400034 	movhi	r5,0
 b14:	21000804 	addi	r4,r4,32
 b18:	29400804 	addi	r5,r5,32
 b1c:	2140121e 	bne	r4,r5,b68 <alt_load+0x78>
 b20:	00000b06 	br	b50 <alt_load+0x60>
 b24:	00c00034 	movhi	r3,0
 b28:	18c33304 	addi	r3,r3,3276
 b2c:	1907c83a 	sub	r3,r3,r4
 b30:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b34:	10fff526 	beq	r2,r3,b0c <alt_load+0x1c>
    {
      *to++ = *from++;
 b38:	114f883a 	add	r7,r2,r5
 b3c:	39c00017 	ldw	r7,0(r7)
 b40:	110d883a 	add	r6,r2,r4
 b44:	10800104 	addi	r2,r2,4
 b48:	31c00015 	stw	r7,0(r6)
 b4c:	003ff906 	br	b34 <alt_load+0x44>
 b50:	01000034 	movhi	r4,0
 b54:	01400034 	movhi	r5,0
 b58:	21032904 	addi	r4,r4,3236
 b5c:	29432904 	addi	r5,r5,3236

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 b60:	2140101e 	bne	r4,r5,ba4 <alt_load+0xb4>
 b64:	00000b06 	br	b94 <alt_load+0xa4>
 b68:	00c00034 	movhi	r3,0
 b6c:	18c06004 	addi	r3,r3,384
 b70:	1907c83a 	sub	r3,r3,r4
 b74:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b78:	10fff526 	beq	r2,r3,b50 <alt_load+0x60>
    {
      *to++ = *from++;
 b7c:	114f883a 	add	r7,r2,r5
 b80:	39c00017 	ldw	r7,0(r7)
 b84:	110d883a 	add	r6,r2,r4
 b88:	10800104 	addi	r2,r2,4
 b8c:	31c00015 	stw	r7,0(r6)
 b90:	003ff906 	br	b78 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 b94:	0000c200 	call	c20 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 b98:	dfc00017 	ldw	ra,0(sp)
 b9c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 ba0:	0000c241 	jmpi	c24 <alt_icache_flush_all>
 ba4:	00c00034 	movhi	r3,0
 ba8:	18c32904 	addi	r3,r3,3236
 bac:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 bb0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 bb4:	18bff726 	beq	r3,r2,b94 <alt_load+0xa4>
    {
      *to++ = *from++;
 bb8:	114f883a 	add	r7,r2,r5
 bbc:	39c00017 	ldw	r7,0(r7)
 bc0:	110d883a 	add	r6,r2,r4
 bc4:	10800104 	addi	r2,r2,4
 bc8:	31c00015 	stw	r7,0(r6)
 bcc:	003ff906 	br	bb4 <alt_load+0xc4>

00000bd0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 bd0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 bd4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 bd8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 bdc:	0000bfc0 	call	bfc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 be0:	0000c1c0 	call	c1c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 be4:	d1a01e17 	ldw	r6,-32648(gp)
 be8:	d1601f17 	ldw	r5,-32644(gp)
 bec:	d1202017 	ldw	r4,-32640(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 bf0:	dfc00017 	ldw	ra,0(sp)
 bf4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 bf8:	00009181 	jmpi	918 <main>

00000bfc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 bfc:	deffff04 	addi	sp,sp,-4
 c00:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 c04:	0000c280 	call	c28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c08:	00800044 	movi	r2,1
 c0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c10:	dfc00017 	ldw	ra,0(sp)
 c14:	dec00104 	addi	sp,sp,4
 c18:	f800283a 	ret

00000c1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c1c:	f800283a 	ret

00000c20 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c20:	f800283a 	ret

00000c24 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c24:	f800283a 	ret

00000c28 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c28:	000170fa 	wrctl	ienable,zero
 c2c:	f800283a 	ret

00000c30 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 c30:	213ffe84 	addi	r4,r4,-6
 c34:	008003c4 	movi	r2,15
 c38:	11001636 	bltu	r2,r4,c94 <alt_exception_cause_generated_bad_addr+0x64>
 c3c:	200890ba 	slli	r4,r4,2
 c40:	00800034 	movhi	r2,0
 c44:	10831504 	addi	r2,r2,3156
 c48:	2089883a 	add	r4,r4,r2
 c4c:	20800017 	ldw	r2,0(r4)
 c50:	1000683a 	jmp	r2
 c54:	00000c9c 	xori	zero,zero,50
 c58:	00000c9c 	xori	zero,zero,50
 c5c:	00000c94 	movui	zero,50
 c60:	00000c94 	movui	zero,50
 c64:	00000c94 	movui	zero,50
 c68:	00000c9c 	xori	zero,zero,50
 c6c:	00000c94 	movui	zero,50
 c70:	00000c94 	movui	zero,50
 c74:	00000c9c 	xori	zero,zero,50
 c78:	00000c9c 	xori	zero,zero,50
 c7c:	00000c94 	movui	zero,50
 c80:	00000c9c 	xori	zero,zero,50
 c84:	00000c94 	movui	zero,50
 c88:	00000c94 	movui	zero,50
 c8c:	00000c94 	movui	zero,50
 c90:	00000c9c 	xori	zero,zero,50
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c94:	0005883a 	mov	r2,zero
 c98:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c9c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 ca0:	f800283a 	ret
