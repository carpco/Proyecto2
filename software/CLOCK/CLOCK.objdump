
CLOCK.elf:     file format elf32-littlenios2
CLOCK.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000cd4 memsz 0x00000cd4 flags r-x
    LOAD off    0x00001cf4 vaddr 0x00000cf4 paddr 0x00000d28 align 2**12
         filesz 0x00000034 memsz 0x00000034 flags rw-
    LOAD off    0x00001d5c vaddr 0x00000d5c paddr 0x00000d5c align 2**12
         filesz 0x00000000 memsz 0x0000013c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000b74  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00000cf4  00000d5c  00001d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000034  00000cf4  00000d28  00001cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000013c  00000d5c  00000d5c  00001d5c  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00000e98  00000e98  00001d28  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001f8  00000000  00000000  00001d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000011e0  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008fe  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000008e4  00000000  00000000  00003a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001f8  00000000  00000000  0000430c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a2e  00000000  00000000  00004504  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000213  00000000  00000000  00004f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00005148  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00005158  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000062fe  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00006301  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006304  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006305  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00006306  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000630a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000630e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00006312  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001d  00000000  00000000  00006319  2**0
                  CONTENTS, READONLY
 26 .jdi          000035a5  00000000  00000000  00006336  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005b976  00000000  00000000  000098db  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00000cf4 l    d  .rodata	00000000 .rodata
00000cf4 l    d  .rwdata	00000000 .rwdata
00000d5c l    d  .bss	00000000 .bss
00000e98 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CLOCK_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000008f4 l     F .text	00000038 irqhandler
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000d94 g     O .bss	00000004 alt_instruction_exception_handler
00000d1c g     O .rwdata	00000004 TIMER
00000d08 g     O .rwdata	00000004 SSEG1
00000d74 g     O .bss	00000004 horas
00000c20 g     F .text	0000002c alt_main
00000d98 g     O .bss	00000100 alt_irq
00000d28 g       *ABS*	00000000 __flash_rwdata_start
00000c78 g     F .text	00000008 altera_nios2_gen2_irq_init
00000d78 g     O .bss	00000004 minutos2
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000001bc g     F .text	00000264 SDECO
00000d8c g     O .bss	00000004 alt_argv
00008cf4 g       *ABS*	00000000 _gp
00000d68 g     O .bss	00000004 aminutos
00000c80 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00000d04 g     O .rwdata	00000004 SSEG2
00000000 g       *ABS*	00000000 __alt_mem_ram
00000d64 g     O .bss	00000004 aminutos2
00000d60 g     O .bss	00000004 ahoras
00000aac g     F .text	00000094 alt_irq_register
00000d14 g     O .rwdata	00000004 PL
00000e98 g       *ABS*	00000000 __bss_end
00000cfc g     O .rwdata	00000004 SWITCHES
00000d84 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000c70 g     F .text	00000004 alt_dcache_flush_all
00000d28 g       *ABS*	00000000 __ram_rwdata_end
00000cf4 g       *ABS*	00000000 __ram_rodata_end
00000684 g     F .text	00000270 DECO
00000e98 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000cf4 g     O .rwdata	00000004 BUTTON
00000d00 g     O .rwdata	00000004 SSEG3
00000180 g     F .text	0000003c _start
00000c6c g     F .text	00000004 alt_sys_init
00000cf4 g       *ABS*	00000000 __ram_rwdata_start
00000cf4 g       *ABS*	00000000 __ram_rodata_start
00000e98 g       *ABS*	00000000 __alt_stack_base
00000d5c g       *ABS*	00000000 __bss_start
0000092c g     F .text	00000180 main
00000d88 g     O .bss	00000004 alt_envp
00000cf8 g     O .rwdata	00000004 LEDS
00000cf4 g       *ABS*	00000000 __flash_rodata_start
00000c4c g     F .text	00000020 alt_irq_init
00000d90 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000d10 g     O .rwdata	00000004 TC
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000d0c g     O .rwdata	00000004 SSEG0
00000d70 g     O .bss	00000004 horas2
00000d6c g     O .bss	00000004 alarma
00000d28 g       *ABS*	00000000 _edata
00000d80 g     O .bss	00000004 register1
00000e98 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000d5c g     O .bss	00000004 ahoras2
00001000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000d24 g     O .rwdata	00000004 uart
00000420 g     F .text	00000264 ADECO
0000000c g       .entry	00000000 _exit
00000c74 g     F .text	00000004 alt_icache_flush_all
00000d18 g     O .rwdata	00000004 PH
00000d20 g     O .rwdata	00000004 alt_priority_mask
00000d7c g     O .bss	00000004 minutos
00000b40 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000034 	movhi	r16,0
 110:	84036604 	addi	r16,r16,3480

  active = alt_irq_pending ();

  do
  {
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 150:	18c7883a 	add	r3,r3,r3
      i++;
 154:	10800044 	addi	r2,r2,1

    } while (1);
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a02817 	ldw	r2,-32608(gp)
 160:	10000426 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 164:	200b883a 	mov	r5,r4
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
 188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 18c:	d6a33d14 	ori	gp,gp,36084
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 194:	10835714 	ori	r2,r2,3420

    movhi r3, %hi(__bss_end)
 198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 19c:	18c3a614 	ori	r3,r3,3736

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	0000b400 	call	b40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	0000c200 	call	c20 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <SDECO>:
DECO();
*TIMER=0b0;// reset request
}

void SDECO(){
	  switch (minutos){ /*deco Tiempo a 7-segmentos*/
 1bc:	d0a02217 	ldw	r2,-32632(gp)
 1c0:	00c00284 	movi	r3,10
 1c4:	18802d36 	bltu	r3,r2,27c <SDECO+0xc0>
 1c8:	100490ba 	slli	r2,r2,2
 1cc:	00c00034 	movhi	r3,0
 1d0:	18c07904 	addi	r3,r3,484
 1d4:	10c5883a 	add	r2,r2,r3
 1d8:	10c00017 	ldw	r3,0(r2)
 1dc:	d0a00617 	ldw	r2,-32744(gp)
 1e0:	1800683a 	jmp	r3
 1e4:	00000210 	cmplti	zero,zero,8
 1e8:	00000218 	cmpnei	zero,zero,8
 1ec:	00000224 	muli	zero,zero,8
 1f0:	0000022c 	andhi	zero,zero,8
 1f4:	00000234 	movhi	zero,8
 1f8:	0000023c 	xorhi	zero,zero,8
 1fc:	00000244 	movi	zero,9
 200:	0000024c 	andi	zero,zero,9
 204:	00000254 	movui	zero,9
 208:	0000025c 	xori	zero,zero,9
 20c:	00000264 	muli	zero,zero,9
		  case 0:
			*SSEG0 = 0x40;
 210:	00c01004 	movi	r3,64
 214:	00000106 	br	21c <SDECO+0x60>
			break;
		  case 1:
			*SSEG0 = 0xf9;
 218:	00c03e44 	movi	r3,249
 21c:	10c00015 	stw	r3,0(r2)
			break;
 220:	00001606 	br	27c <SDECO+0xc0>
		  case 2:
			*SSEG0 = 0xa4;
 224:	00c02904 	movi	r3,164
 228:	003ffc06 	br	21c <SDECO+0x60>
			break;
		  case 3:
			*SSEG0 = 0xb0;
 22c:	00c02c04 	movi	r3,176
 230:	003ffa06 	br	21c <SDECO+0x60>
			break;
		  case 4:
			*SSEG0 = 0x99;
 234:	00c02644 	movi	r3,153
 238:	003ff806 	br	21c <SDECO+0x60>
			break;
		  case 5:
			*SSEG0 = 0x92;
 23c:	00c02484 	movi	r3,146
 240:	003ff606 	br	21c <SDECO+0x60>
			break;
		  case 6:
			*SSEG0 = 0x02;
 244:	00c00084 	movi	r3,2
 248:	003ff406 	br	21c <SDECO+0x60>
			break;
		  case 7:
			*SSEG0 = 0xf8;
 24c:	00c03e04 	movi	r3,248
 250:	003ff206 	br	21c <SDECO+0x60>
			break;
		  case 8:
			*SSEG0 = 0x00;
 254:	10000015 	stw	zero,0(r2)
			break;
 258:	00000806 	br	27c <SDECO+0xc0>
		  case 9:
			*SSEG0 = 0x10;
 25c:	00c00404 	movi	r3,16
 260:	003fee06 	br	21c <SDECO+0x60>
			break;
		  case 10:
			*SSEG0 = 0x40;
 264:	00c01004 	movi	r3,64
 268:	10c00015 	stw	r3,0(r2)
			minutos = 0;
			minutos2 = minutos2 + 1;
 26c:	d0a02117 	ldw	r2,-32636(gp)
		  case 9:
			*SSEG0 = 0x10;
			break;
		  case 10:
			*SSEG0 = 0x40;
			minutos = 0;
 270:	d0202215 	stw	zero,-32632(gp)
			minutos2 = minutos2 + 1;
 274:	10800044 	addi	r2,r2,1
 278:	d0a02115 	stw	r2,-32636(gp)
			break;
	  }
	  switch (minutos2){ /*deco Tiempo decenas a 7-segmentos*/
 27c:	d0a02117 	ldw	r2,-32636(gp)
 280:	00c00184 	movi	r3,6
 284:	18801e36 	bltu	r3,r2,300 <SDECO+0x144>
 288:	100490ba 	slli	r2,r2,2
 28c:	00c00034 	movhi	r3,0
 290:	18c0a904 	addi	r3,r3,676
 294:	10c5883a 	add	r2,r2,r3
 298:	10c00017 	ldw	r3,0(r2)
 29c:	d0a00517 	ldw	r2,-32748(gp)
 2a0:	1800683a 	jmp	r3
 2a4:	000002c0 	call	2c <__flash_exceptions_start+0xc>
 2a8:	000002c8 	cmpgei	zero,zero,11
 2ac:	000002d4 	movui	zero,11
 2b0:	000002dc 	xori	zero,zero,11
 2b4:	000002e4 	muli	zero,zero,11
 2b8:	000002ec 	andhi	zero,zero,11
 2bc:	000002f4 	movhi	zero,11
		  case 0:
			*SSEG1 = 0x40;
 2c0:	00c01004 	movi	r3,64
 2c4:	00000106 	br	2cc <SDECO+0x110>
			break;
		  case 1:
			*SSEG1 = 0xf9;
 2c8:	00c03e44 	movi	r3,249
 2cc:	10c00015 	stw	r3,0(r2)
			break;
 2d0:	00000b06 	br	300 <SDECO+0x144>
		  case 2:
			*SSEG1 = 0xa4;
 2d4:	00c02904 	movi	r3,164
 2d8:	003ffc06 	br	2cc <SDECO+0x110>
			break;
		  case 3:
			*SSEG1 = 0xb0;
 2dc:	00c02c04 	movi	r3,176
 2e0:	003ffa06 	br	2cc <SDECO+0x110>
			break;
		  case 4:
			*SSEG1 = 0x99;
 2e4:	00c02644 	movi	r3,153
 2e8:	003ff806 	br	2cc <SDECO+0x110>
			break;
		  case 5:
			*SSEG1 = 0x92;
 2ec:	00c02484 	movi	r3,146
 2f0:	003ff606 	br	2cc <SDECO+0x110>
			break;
		  case 6:
			*SSEG1 = 0x40;
 2f4:	00c01004 	movi	r3,64
 2f8:	10c00015 	stw	r3,0(r2)
			minutos2 = 0;
 2fc:	d0202115 	stw	zero,-32636(gp)
			break;
	  }
	  switch (horas){ /*deco Tiempo a 7-segmentos*/
 300:	d0a02017 	ldw	r2,-32640(gp)
 304:	00c00284 	movi	r3,10
 308:	18802d36 	bltu	r3,r2,3c0 <SDECO+0x204>
 30c:	100490ba 	slli	r2,r2,2
 310:	00c00034 	movhi	r3,0
 314:	18c0ca04 	addi	r3,r3,808
 318:	10c5883a 	add	r2,r2,r3
 31c:	10c00017 	ldw	r3,0(r2)
 320:	d0a00417 	ldw	r2,-32752(gp)
 324:	1800683a 	jmp	r3
 328:	00000354 	movui	zero,13
 32c:	0000035c 	xori	zero,zero,13
 330:	00000368 	cmpgeui	zero,zero,13
 334:	00000370 	cmpltui	zero,zero,13
 338:	00000378 	rdprs	zero,zero,13
 33c:	00000380 	call	38 <__flash_exceptions_start+0x18>
 340:	00000388 	cmpgei	zero,zero,14
 344:	00000390 	cmplti	zero,zero,14
 348:	00000398 	cmpnei	zero,zero,14
 34c:	000003a0 	cmpeqi	zero,zero,14
 350:	000003a8 	cmpgeui	zero,zero,14
	  		  case 0:
	  			*SSEG2 = 0x40;
 354:	00c01004 	movi	r3,64
 358:	00000106 	br	360 <SDECO+0x1a4>
	  			break;
	  		  case 1:
	  			*SSEG2 = 0xf9;
 35c:	00c03e44 	movi	r3,249
 360:	10c00015 	stw	r3,0(r2)
	  			break;
 364:	00001606 	br	3c0 <SDECO+0x204>
	  		  case 2:
	  			*SSEG2 = 0xa4;
 368:	00c02904 	movi	r3,164
 36c:	003ffc06 	br	360 <SDECO+0x1a4>
	  			break;
	  		  case 3:
	  			*SSEG2 = 0xb0;
 370:	00c02c04 	movi	r3,176
 374:	003ffa06 	br	360 <SDECO+0x1a4>
	  			break;
	  		  case 4:
	  			*SSEG2 = 0x99;
 378:	00c02644 	movi	r3,153
 37c:	003ff806 	br	360 <SDECO+0x1a4>
	  			break;
	  		  case 5:
	  			*SSEG2 = 0x92;
 380:	00c02484 	movi	r3,146
 384:	003ff606 	br	360 <SDECO+0x1a4>
	  			break;
	  		  case 6:
	  			*SSEG2 = 0x02;
 388:	00c00084 	movi	r3,2
 38c:	003ff406 	br	360 <SDECO+0x1a4>
	  			break;
	  		  case 7:
	  			*SSEG2 = 0xf8;
 390:	00c03e04 	movi	r3,248
 394:	003ff206 	br	360 <SDECO+0x1a4>
	  			break;
	  		  case 8:
	  			*SSEG2 = 0x00;
 398:	10000015 	stw	zero,0(r2)
	  			break;
 39c:	00000806 	br	3c0 <SDECO+0x204>
	  		  case 9:
	  			*SSEG2 = 0x10;
 3a0:	00c00404 	movi	r3,16
 3a4:	003fee06 	br	360 <SDECO+0x1a4>
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
 3a8:	00c01004 	movi	r3,64
 3ac:	10c00015 	stw	r3,0(r2)
	  			horas = 0;
	  			horas2 = horas2 + 1;
 3b0:	d0a01f17 	ldw	r2,-32644(gp)
	  		  case 9:
	  			*SSEG2 = 0x10;
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
	  			horas = 0;
 3b4:	d0202015 	stw	zero,-32640(gp)
	  			horas2 = horas2 + 1;
 3b8:	10800044 	addi	r2,r2,1
 3bc:	d0a01f15 	stw	r2,-32644(gp)
	  			break;
	  	  }
	  	  switch (horas2){ /*deco Tiempo decenas a 7-segmentos*/
 3c0:	d0a01f17 	ldw	r2,-32644(gp)
 3c4:	00c00044 	movi	r3,1
 3c8:	10c00a26 	beq	r2,r3,3f4 <SDECO+0x238>
 3cc:	18800216 	blt	r3,r2,3d8 <SDECO+0x21c>
 3d0:	10000626 	beq	r2,zero,3ec <SDECO+0x230>
 3d4:	f800283a 	ret
 3d8:	00c00084 	movi	r3,2
 3dc:	10c00726 	beq	r2,r3,3fc <SDECO+0x240>
 3e0:	00c000c4 	movi	r3,3
 3e4:	10c00926 	beq	r2,r3,40c <SDECO+0x250>
 3e8:	f800283a 	ret
	  		  case 0:
	  			*SSEG3 = 0x40;
 3ec:	00c01004 	movi	r3,64
 3f0:	00000306 	br	400 <SDECO+0x244>
	  			break;
	  		  case 1:
	  			*SSEG3 = 0xf9;
 3f4:	00c03e44 	movi	r3,249
 3f8:	00000106 	br	400 <SDECO+0x244>
	  			break;
	  		  case 2:
	  			*SSEG3 = 0xa4;
 3fc:	00c02904 	movi	r3,164
 400:	d0a00317 	ldw	r2,-32756(gp)
 404:	10c00015 	stw	r3,0(r2)
	  			break;
 408:	f800283a 	ret
	  		  case 3:
	  			*SSEG3 = 0x40;
 40c:	d0a00317 	ldw	r2,-32756(gp)
 410:	00c01004 	movi	r3,64
 414:	10c00015 	stw	r3,0(r2)
	  			horas2 = 0;
 418:	d0201f15 	stw	zero,-32644(gp)
 41c:	f800283a 	ret

00000420 <ADECO>:
	  			break;
	  	  }
	 }

void ADECO(){
	  switch (aminutos){ /*deco Tiempo a 7-segmentos*/
 420:	d0a01d17 	ldw	r2,-32652(gp)
 424:	00c00284 	movi	r3,10
 428:	18802d36 	bltu	r3,r2,4e0 <ADECO+0xc0>
 42c:	100490ba 	slli	r2,r2,2
 430:	00c00034 	movhi	r3,0
 434:	18c11204 	addi	r3,r3,1096
 438:	10c5883a 	add	r2,r2,r3
 43c:	10c00017 	ldw	r3,0(r2)
 440:	d0a00617 	ldw	r2,-32744(gp)
 444:	1800683a 	jmp	r3
 448:	00000474 	movhi	zero,17
 44c:	0000047c 	xorhi	zero,zero,17
 450:	00000488 	cmpgei	zero,zero,18
 454:	00000490 	cmplti	zero,zero,18
 458:	00000498 	cmpnei	zero,zero,18
 45c:	000004a0 	cmpeqi	zero,zero,18
 460:	000004a8 	cmpgeui	zero,zero,18
 464:	000004b0 	cmpltui	zero,zero,18
 468:	000004b8 	rdprs	zero,zero,18
 46c:	000004c0 	call	4c <__flash_exceptions_start+0x2c>
 470:	000004c8 	cmpgei	zero,zero,19
		  case 0:
			*SSEG0 = 0x40;
 474:	00c01004 	movi	r3,64
 478:	00000106 	br	480 <ADECO+0x60>
			break;
		  case 1:
			*SSEG0 = 0xf9;
 47c:	00c03e44 	movi	r3,249
 480:	10c00015 	stw	r3,0(r2)
			break;
 484:	00001606 	br	4e0 <ADECO+0xc0>
		  case 2:
			*SSEG0 = 0xa4;
 488:	00c02904 	movi	r3,164
 48c:	003ffc06 	br	480 <ADECO+0x60>
			break;
		  case 3:
			*SSEG0 = 0xb0;
 490:	00c02c04 	movi	r3,176
 494:	003ffa06 	br	480 <ADECO+0x60>
			break;
		  case 4:
			*SSEG0 = 0x99;
 498:	00c02644 	movi	r3,153
 49c:	003ff806 	br	480 <ADECO+0x60>
			break;
		  case 5:
			*SSEG0 = 0x92;
 4a0:	00c02484 	movi	r3,146
 4a4:	003ff606 	br	480 <ADECO+0x60>
			break;
		  case 6:
			*SSEG0 = 0x02;
 4a8:	00c00084 	movi	r3,2
 4ac:	003ff406 	br	480 <ADECO+0x60>
			break;
		  case 7:
			*SSEG0 = 0xf8;
 4b0:	00c03e04 	movi	r3,248
 4b4:	003ff206 	br	480 <ADECO+0x60>
			break;
		  case 8:
			*SSEG0 = 0x00;
 4b8:	10000015 	stw	zero,0(r2)
			break;
 4bc:	00000806 	br	4e0 <ADECO+0xc0>
		  case 9:
			*SSEG0 = 0x10;
 4c0:	00c00404 	movi	r3,16
 4c4:	003fee06 	br	480 <ADECO+0x60>
			break;
		  case 10:
			*SSEG0 = 0x40;
 4c8:	00c01004 	movi	r3,64
 4cc:	10c00015 	stw	r3,0(r2)
			aminutos = 0;
			aminutos2 = aminutos2 + 1;
 4d0:	d0a01c17 	ldw	r2,-32656(gp)
		  case 9:
			*SSEG0 = 0x10;
			break;
		  case 10:
			*SSEG0 = 0x40;
			aminutos = 0;
 4d4:	d0201d15 	stw	zero,-32652(gp)
			aminutos2 = aminutos2 + 1;
 4d8:	10800044 	addi	r2,r2,1
 4dc:	d0a01c15 	stw	r2,-32656(gp)
			break;
	  }
	  switch (aminutos2){ /*deco Tiempo decenas a 7-segmentos*/
 4e0:	d0a01c17 	ldw	r2,-32656(gp)
 4e4:	00c00184 	movi	r3,6
 4e8:	18801e36 	bltu	r3,r2,564 <ADECO+0x144>
 4ec:	100490ba 	slli	r2,r2,2
 4f0:	00c00034 	movhi	r3,0
 4f4:	18c14204 	addi	r3,r3,1288
 4f8:	10c5883a 	add	r2,r2,r3
 4fc:	10c00017 	ldw	r3,0(r2)
 500:	d0a00517 	ldw	r2,-32748(gp)
 504:	1800683a 	jmp	r3
 508:	00000524 	muli	zero,zero,20
 50c:	0000052c 	andhi	zero,zero,20
 510:	00000538 	rdprs	zero,zero,20
 514:	00000540 	call	54 <__flash_exceptions_start+0x34>
 518:	00000548 	cmpgei	zero,zero,21
 51c:	00000550 	cmplti	zero,zero,21
 520:	00000558 	cmpnei	zero,zero,21
		  case 0:
			*SSEG1 = 0x40;
 524:	00c01004 	movi	r3,64
 528:	00000106 	br	530 <ADECO+0x110>
			break;
		  case 1:
			*SSEG1 = 0xf9;
 52c:	00c03e44 	movi	r3,249
 530:	10c00015 	stw	r3,0(r2)
			break;
 534:	00000b06 	br	564 <ADECO+0x144>
		  case 2:
			*SSEG1 = 0xa4;
 538:	00c02904 	movi	r3,164
 53c:	003ffc06 	br	530 <ADECO+0x110>
			break;
		  case 3:
			*SSEG1 = 0xb0;
 540:	00c02c04 	movi	r3,176
 544:	003ffa06 	br	530 <ADECO+0x110>
			break;
		  case 4:
			*SSEG1 = 0x99;
 548:	00c02644 	movi	r3,153
 54c:	003ff806 	br	530 <ADECO+0x110>
			break;
		  case 5:
			*SSEG1 = 0x92;
 550:	00c02484 	movi	r3,146
 554:	003ff606 	br	530 <ADECO+0x110>
			break;
		  case 6:
			*SSEG1 = 0x40;
 558:	00c01004 	movi	r3,64
 55c:	10c00015 	stw	r3,0(r2)
			aminutos2 = 0;
 560:	d0201c15 	stw	zero,-32656(gp)
			break;
	  }
	  switch (ahoras){ /*deco Tiempo a 7-segmentos*/
 564:	d0a01b17 	ldw	r2,-32660(gp)
 568:	00c00284 	movi	r3,10
 56c:	18802d36 	bltu	r3,r2,624 <ADECO+0x204>
 570:	100490ba 	slli	r2,r2,2
 574:	00c00034 	movhi	r3,0
 578:	18c16304 	addi	r3,r3,1420
 57c:	10c5883a 	add	r2,r2,r3
 580:	10c00017 	ldw	r3,0(r2)
 584:	d0a00417 	ldw	r2,-32752(gp)
 588:	1800683a 	jmp	r3
 58c:	000005b8 	rdprs	zero,zero,22
 590:	000005c0 	call	5c <__flash_exceptions_start+0x3c>
 594:	000005cc 	andi	zero,zero,23
 598:	000005d4 	movui	zero,23
 59c:	000005dc 	xori	zero,zero,23
 5a0:	000005e4 	muli	zero,zero,23
 5a4:	000005ec 	andhi	zero,zero,23
 5a8:	000005f4 	movhi	zero,23
 5ac:	000005fc 	xorhi	zero,zero,23
 5b0:	00000604 	movi	zero,24
 5b4:	0000060c 	andi	zero,zero,24
	  		  case 0:
	  			*SSEG2 = 0x40;
 5b8:	00c01004 	movi	r3,64
 5bc:	00000106 	br	5c4 <ADECO+0x1a4>
	  			break;
	  		  case 1:
	  			*SSEG2 = 0xf9;
 5c0:	00c03e44 	movi	r3,249
 5c4:	10c00015 	stw	r3,0(r2)
	  			break;
 5c8:	00001606 	br	624 <ADECO+0x204>
	  		  case 2:
	  			*SSEG2 = 0xa4;
 5cc:	00c02904 	movi	r3,164
 5d0:	003ffc06 	br	5c4 <ADECO+0x1a4>
	  			break;
	  		  case 3:
	  			*SSEG2 = 0xb0;
 5d4:	00c02c04 	movi	r3,176
 5d8:	003ffa06 	br	5c4 <ADECO+0x1a4>
	  			break;
	  		  case 4:
	  			*SSEG2 = 0x99;
 5dc:	00c02644 	movi	r3,153
 5e0:	003ff806 	br	5c4 <ADECO+0x1a4>
	  			break;
	  		  case 5:
	  			*SSEG2 = 0x92;
 5e4:	00c02484 	movi	r3,146
 5e8:	003ff606 	br	5c4 <ADECO+0x1a4>
	  			break;
	  		  case 6:
	  			*SSEG2 = 0x02;
 5ec:	00c00084 	movi	r3,2
 5f0:	003ff406 	br	5c4 <ADECO+0x1a4>
	  			break;
	  		  case 7:
	  			*SSEG2 = 0xf8;
 5f4:	00c03e04 	movi	r3,248
 5f8:	003ff206 	br	5c4 <ADECO+0x1a4>
	  			break;
	  		  case 8:
	  			*SSEG2 = 0x00;
 5fc:	10000015 	stw	zero,0(r2)
	  			break;
 600:	00000806 	br	624 <ADECO+0x204>
	  		  case 9:
	  			*SSEG2 = 0x10;
 604:	00c00404 	movi	r3,16
 608:	003fee06 	br	5c4 <ADECO+0x1a4>
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
 60c:	00c01004 	movi	r3,64
 610:	10c00015 	stw	r3,0(r2)
	  			ahoras = 0;
	  			ahoras2 = ahoras2 + 1;
 614:	d0a01a17 	ldw	r2,-32664(gp)
	  		  case 9:
	  			*SSEG2 = 0x10;
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
	  			ahoras = 0;
 618:	d0201b15 	stw	zero,-32660(gp)
	  			ahoras2 = ahoras2 + 1;
 61c:	10800044 	addi	r2,r2,1
 620:	d0a01a15 	stw	r2,-32664(gp)
	  			break;
	  	  }
	  	  switch (ahoras2){ /*deco Tiempo decenas a 7-segmentos*/
 624:	d0a01a17 	ldw	r2,-32664(gp)
 628:	00c00044 	movi	r3,1
 62c:	10c00a26 	beq	r2,r3,658 <ADECO+0x238>
 630:	18800216 	blt	r3,r2,63c <ADECO+0x21c>
 634:	10000626 	beq	r2,zero,650 <ADECO+0x230>
 638:	f800283a 	ret
 63c:	00c00084 	movi	r3,2
 640:	10c00726 	beq	r2,r3,660 <ADECO+0x240>
 644:	00c000c4 	movi	r3,3
 648:	10c00926 	beq	r2,r3,670 <ADECO+0x250>
 64c:	f800283a 	ret
	  		  case 0:
	  			*SSEG3 = 0x40;
 650:	00c01004 	movi	r3,64
 654:	00000306 	br	664 <ADECO+0x244>
	  			break;
	  		  case 1:
	  			*SSEG3 = 0xf9;
 658:	00c03e44 	movi	r3,249
 65c:	00000106 	br	664 <ADECO+0x244>
	  			break;
	  		  case 2:
	  			*SSEG3 = 0xa4;
 660:	00c02904 	movi	r3,164
 664:	d0a00317 	ldw	r2,-32756(gp)
 668:	10c00015 	stw	r3,0(r2)
	  			break;
 66c:	f800283a 	ret
	  		  case 3:
	  			*SSEG3 = 0x40;
 670:	d0a00317 	ldw	r2,-32756(gp)
 674:	00c01004 	movi	r3,64
 678:	10c00015 	stw	r3,0(r2)
	  			ahoras2 = 0;
 67c:	d0201a15 	stw	zero,-32664(gp)
 680:	f800283a 	ret

00000684 <DECO>:
	  			break;
	  	  }
	 }

void DECO(){
	  switch (minutos){ /*deco Tiempo a 7-segmentos*/
 684:	d0a02217 	ldw	r2,-32632(gp)
 688:	00c00284 	movi	r3,10
 68c:	18802d36 	bltu	r3,r2,744 <DECO+0xc0>
 690:	100490ba 	slli	r2,r2,2
 694:	00c00034 	movhi	r3,0
 698:	18c1ab04 	addi	r3,r3,1708
 69c:	10c5883a 	add	r2,r2,r3
 6a0:	10c00017 	ldw	r3,0(r2)
 6a4:	d0a00617 	ldw	r2,-32744(gp)
 6a8:	1800683a 	jmp	r3
 6ac:	000006d8 	cmpnei	zero,zero,27
 6b0:	000006e0 	cmpeqi	zero,zero,27
 6b4:	000006ec 	andhi	zero,zero,27
 6b8:	000006f4 	movhi	zero,27
 6bc:	000006fc 	xorhi	zero,zero,27
 6c0:	00000704 	movi	zero,28
 6c4:	0000070c 	andi	zero,zero,28
 6c8:	00000714 	movui	zero,28
 6cc:	0000071c 	xori	zero,zero,28
 6d0:	00000724 	muli	zero,zero,28
 6d4:	0000072c 	andhi	zero,zero,28
		  case 0:
			*SSEG0 = 0x40;
 6d8:	00c01004 	movi	r3,64
 6dc:	00000106 	br	6e4 <DECO+0x60>
			break;
		  case 1:
			*SSEG0 = 0xf9;
 6e0:	00c03e44 	movi	r3,249
 6e4:	10c00015 	stw	r3,0(r2)
			break;
 6e8:	00001606 	br	744 <DECO+0xc0>
		  case 2:
			*SSEG0 = 0xa4;
 6ec:	00c02904 	movi	r3,164
 6f0:	003ffc06 	br	6e4 <DECO+0x60>
			break;
		  case 3:
			*SSEG0 = 0xb0;
 6f4:	00c02c04 	movi	r3,176
 6f8:	003ffa06 	br	6e4 <DECO+0x60>
			break;
		  case 4:
			*SSEG0 = 0x99;
 6fc:	00c02644 	movi	r3,153
 700:	003ff806 	br	6e4 <DECO+0x60>
			break;
		  case 5:
			*SSEG0 = 0x92;
 704:	00c02484 	movi	r3,146
 708:	003ff606 	br	6e4 <DECO+0x60>
			break;
		  case 6:
			*SSEG0 = 0x02;
 70c:	00c00084 	movi	r3,2
 710:	003ff406 	br	6e4 <DECO+0x60>
			break;
		  case 7:
			*SSEG0 = 0xf8;
 714:	00c03e04 	movi	r3,248
 718:	003ff206 	br	6e4 <DECO+0x60>
			break;
		  case 8:
			*SSEG0 = 0x00;
 71c:	10000015 	stw	zero,0(r2)
			break;
 720:	00000806 	br	744 <DECO+0xc0>
		  case 9:
			*SSEG0 = 0x10;
 724:	00c00404 	movi	r3,16
 728:	003fee06 	br	6e4 <DECO+0x60>
			break;
		  case 10:
			*SSEG0 = 0x40;
 72c:	00c01004 	movi	r3,64
 730:	10c00015 	stw	r3,0(r2)
			minutos = 0;
			minutos2 = minutos2 + 1;
 734:	d0a02117 	ldw	r2,-32636(gp)
		  case 9:
			*SSEG0 = 0x10;
			break;
		  case 10:
			*SSEG0 = 0x40;
			minutos = 0;
 738:	d0202215 	stw	zero,-32632(gp)
			minutos2 = minutos2 + 1;
 73c:	10800044 	addi	r2,r2,1
 740:	d0a02115 	stw	r2,-32636(gp)
			break;
	  }
	  switch (minutos2){ /*deco Tiempo decenas a 7-segmentos*/
 744:	d0a02117 	ldw	r2,-32636(gp)
 748:	00c00184 	movi	r3,6
 74c:	18802136 	bltu	r3,r2,7d4 <DECO+0x150>
 750:	100490ba 	slli	r2,r2,2
 754:	00c00034 	movhi	r3,0
 758:	18c1db04 	addi	r3,r3,1900
 75c:	10c5883a 	add	r2,r2,r3
 760:	10c00017 	ldw	r3,0(r2)
 764:	d0a00517 	ldw	r2,-32748(gp)
 768:	1800683a 	jmp	r3
 76c:	00000788 	cmpgei	zero,zero,30
 770:	00000790 	cmplti	zero,zero,30
 774:	0000079c 	xori	zero,zero,30
 778:	000007a4 	muli	zero,zero,30
 77c:	000007ac 	andhi	zero,zero,30
 780:	000007b4 	movhi	zero,30
 784:	000007bc 	xorhi	zero,zero,30
		  case 0:
			*SSEG1 = 0x40;
 788:	00c01004 	movi	r3,64
 78c:	00000106 	br	794 <DECO+0x110>
			break;
		  case 1:
			*SSEG1 = 0xf9;
 790:	00c03e44 	movi	r3,249
 794:	10c00015 	stw	r3,0(r2)
			break;
 798:	00000e06 	br	7d4 <DECO+0x150>
		  case 2:
			*SSEG1 = 0xa4;
 79c:	00c02904 	movi	r3,164
 7a0:	003ffc06 	br	794 <DECO+0x110>
			break;
		  case 3:
			*SSEG1 = 0xb0;
 7a4:	00c02c04 	movi	r3,176
 7a8:	003ffa06 	br	794 <DECO+0x110>
			break;
		  case 4:
			*SSEG1 = 0x99;
 7ac:	00c02644 	movi	r3,153
 7b0:	003ff806 	br	794 <DECO+0x110>
			break;
		  case 5:
			*SSEG1 = 0x92;
 7b4:	00c02484 	movi	r3,146
 7b8:	003ff606 	br	794 <DECO+0x110>
			break;
		  case 6:
			*SSEG1 = 0x40;
 7bc:	00c01004 	movi	r3,64
 7c0:	10c00015 	stw	r3,0(r2)
			minutos2 = 0;
			horas=horas+1;
 7c4:	d0a02017 	ldw	r2,-32640(gp)
		  case 5:
			*SSEG1 = 0x92;
			break;
		  case 6:
			*SSEG1 = 0x40;
			minutos2 = 0;
 7c8:	d0202115 	stw	zero,-32636(gp)
			horas=horas+1;
 7cc:	10800044 	addi	r2,r2,1
 7d0:	d0a02015 	stw	r2,-32640(gp)
			break;
	  }
	  switch (horas){ /*deco Tiempo a 7-segmentos*/
 7d4:	d0a02017 	ldw	r2,-32640(gp)
 7d8:	00c00284 	movi	r3,10
 7dc:	18802d36 	bltu	r3,r2,894 <DECO+0x210>
 7e0:	100490ba 	slli	r2,r2,2
 7e4:	00c00034 	movhi	r3,0
 7e8:	18c1ff04 	addi	r3,r3,2044
 7ec:	10c5883a 	add	r2,r2,r3
 7f0:	10c00017 	ldw	r3,0(r2)
 7f4:	d0a00417 	ldw	r2,-32752(gp)
 7f8:	1800683a 	jmp	r3
 7fc:	00000828 	cmpgeui	zero,zero,32
 800:	00000830 	cmpltui	zero,zero,32
 804:	0000083c 	xorhi	zero,zero,32
 808:	00000844 	movi	zero,33
 80c:	0000084c 	andi	zero,zero,33
 810:	00000854 	movui	zero,33
 814:	0000085c 	xori	zero,zero,33
 818:	00000864 	muli	zero,zero,33
 81c:	0000086c 	andhi	zero,zero,33
 820:	00000874 	movhi	zero,33
 824:	0000087c 	xorhi	zero,zero,33
	  		  case 0:
	  			*SSEG2 = 0x40;
 828:	00c01004 	movi	r3,64
 82c:	00000106 	br	834 <DECO+0x1b0>
	  			break;
	  		  case 1:
	  			*SSEG2 = 0xf9;
 830:	00c03e44 	movi	r3,249
 834:	10c00015 	stw	r3,0(r2)
	  			break;
 838:	00001606 	br	894 <DECO+0x210>
	  		  case 2:
	  			*SSEG2 = 0xa4;
 83c:	00c02904 	movi	r3,164
 840:	003ffc06 	br	834 <DECO+0x1b0>
	  			break;
	  		  case 3:
	  			*SSEG2 = 0xb0;
 844:	00c02c04 	movi	r3,176
 848:	003ffa06 	br	834 <DECO+0x1b0>
	  			break;
	  		  case 4:
	  			*SSEG2 = 0x99;
 84c:	00c02644 	movi	r3,153
 850:	003ff806 	br	834 <DECO+0x1b0>
	  			break;
	  		  case 5:
	  			*SSEG2 = 0x92;
 854:	00c02484 	movi	r3,146
 858:	003ff606 	br	834 <DECO+0x1b0>
	  			break;
	  		  case 6:
	  			*SSEG2 = 0x02;
 85c:	00c00084 	movi	r3,2
 860:	003ff406 	br	834 <DECO+0x1b0>
	  			break;
	  		  case 7:
	  			*SSEG2 = 0xf8;
 864:	00c03e04 	movi	r3,248
 868:	003ff206 	br	834 <DECO+0x1b0>
	  			break;
	  		  case 8:
	  			*SSEG2 = 0x00;
 86c:	10000015 	stw	zero,0(r2)
	  			break;
 870:	00000806 	br	894 <DECO+0x210>
	  		  case 9:
	  			*SSEG2 = 0x10;
 874:	00c00404 	movi	r3,16
 878:	003fee06 	br	834 <DECO+0x1b0>
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
 87c:	00c01004 	movi	r3,64
 880:	10c00015 	stw	r3,0(r2)
	  			horas = 0;
	  			horas2 = horas2 + 1;
 884:	d0a01f17 	ldw	r2,-32644(gp)
	  		  case 9:
	  			*SSEG2 = 0x10;
	  			break;
	  		  case 10:
	  			*SSEG2 = 0x40;
	  			horas = 0;
 888:	d0202015 	stw	zero,-32640(gp)
	  			horas2 = horas2 + 1;
 88c:	10800044 	addi	r2,r2,1
 890:	d0a01f15 	stw	r2,-32644(gp)
	  			break;
	  	  }
	  	  switch (horas2){ /*deco Tiempo decenas a 7-segmentos*/
 894:	d0a01f17 	ldw	r2,-32644(gp)
 898:	00c00044 	movi	r3,1
 89c:	10c00a26 	beq	r2,r3,8c8 <DECO+0x244>
 8a0:	18800216 	blt	r3,r2,8ac <DECO+0x228>
 8a4:	10000626 	beq	r2,zero,8c0 <DECO+0x23c>
 8a8:	f800283a 	ret
 8ac:	00c00084 	movi	r3,2
 8b0:	10c00726 	beq	r2,r3,8d0 <DECO+0x24c>
 8b4:	00c000c4 	movi	r3,3
 8b8:	10c00926 	beq	r2,r3,8e0 <DECO+0x25c>
 8bc:	f800283a 	ret
	  		  case 0:
	  			*SSEG3 = 0x40;
 8c0:	00c01004 	movi	r3,64
 8c4:	00000306 	br	8d4 <DECO+0x250>
	  			break;
	  		  case 1:
	  			*SSEG3 = 0xf9;
 8c8:	00c03e44 	movi	r3,249
 8cc:	00000106 	br	8d4 <DECO+0x250>
	  			break;
	  		  case 2:
	  			*SSEG3 = 0xa4;
 8d0:	00c02904 	movi	r3,164
 8d4:	d0a00317 	ldw	r2,-32756(gp)
 8d8:	10c00015 	stw	r3,0(r2)
	  			break;
 8dc:	f800283a 	ret
	  		  case 3:
	  			*SSEG3 = 0x40;
 8e0:	d0a00317 	ldw	r2,-32756(gp)
 8e4:	00c01004 	movi	r3,64
 8e8:	10c00015 	stw	r3,0(r2)
	  			horas2 = 0;
 8ec:	d0201f15 	stw	zero,-32644(gp)
 8f0:	f800283a 	ret

000008f4 <irqhandler>:
int ahoras = 0;
int ahoras2 = 0;
int register1;

static void irqhandler (void * context){
minutos=minutos + 1;
 8f4:	d0a02217 	ldw	r2,-32632(gp)
int aminutos2 = 0;
int ahoras = 0;
int ahoras2 = 0;
int register1;

static void irqhandler (void * context){
 8f8:	deffff04 	addi	sp,sp,-4
 8fc:	dfc00015 	stw	ra,0(sp)
minutos=minutos + 1;
 900:	10800044 	addi	r2,r2,1
 904:	d0a02215 	stw	r2,-32632(gp)
*LEDS=0xff;
 908:	d0a00117 	ldw	r2,-32764(gp)
 90c:	00c03fc4 	movi	r3,255
 910:	10c00015 	stw	r3,0(r2)
DECO();
 914:	00006840 	call	684 <DECO>
*TIMER=0b0;// reset request
 918:	d0a00a17 	ldw	r2,-32728(gp)
 91c:	10000015 	stw	zero,0(r2)
}
 920:	dfc00017 	ldw	ra,0(sp)
 924:	dec00104 	addi	sp,sp,4
 928:	f800283a 	ret

0000092c <main>:
	  	  }
	 }

int main()
{
	*TIMER=0xf5;
 92c:	d0a00a17 	ldw	r2,-32728(gp)
	  			break;
	  	  }
	 }

int main()
{
 930:	defffa04 	addi	sp,sp,-24
 934:	dcc00415 	stw	r19,16(sp)
 938:	dc800315 	stw	r18,12(sp)
 93c:	dc400215 	stw	r17,8(sp)
 940:	dc000115 	stw	r16,4(sp)
 944:	dfc00515 	stw	ra,20(sp)
	*TIMER=0xf5;
 948:	00c03d44 	movi	r3,245
 94c:	10c00015 	stw	r3,0(r2)
  volatile int context;
 //IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0xf080);
 *PL=0xf080;
 950:	d0a00817 	ldw	r2,-32736(gp)
 954:	00fc2014 	movui	r3,61568
 //IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x2fa);
 *PH = 0x2fa;
 //IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 7);
 *TC = 0x7;
 alt_irq_register(TIMER_IRQ, (void*)&context, irqhandler);
 958:	01800034 	movhi	r6,0
int main()
{
	*TIMER=0xf5;
  volatile int context;
 //IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0xf080);
 *PL=0xf080;
 95c:	10c00015 	stw	r3,0(r2)
 //IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x2fa);
 *PH = 0x2fa;
 960:	d0a00917 	ldw	r2,-32732(gp)
 964:	00c0be84 	movi	r3,762
 //IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 7);
 *TC = 0x7;
 alt_irq_register(TIMER_IRQ, (void*)&context, irqhandler);
 968:	31823d04 	addi	r6,r6,2292
	*TIMER=0xf5;
  volatile int context;
 //IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0xf080);
 *PL=0xf080;
 //IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x2fa);
 *PH = 0x2fa;
 96c:	10c00015 	stw	r3,0(r2)
 //IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 7);
 *TC = 0x7;
 970:	d0a00717 	ldw	r2,-32740(gp)
 974:	00c001c4 	movi	r3,7
 alt_irq_register(TIMER_IRQ, (void*)&context, irqhandler);
 978:	d80b883a 	mov	r5,sp
 //IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0xf080);
 *PL=0xf080;
 //IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x2fa);
 *PH = 0x2fa;
 //IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 7);
 *TC = 0x7;
 97c:	10c00015 	stw	r3,0(r2)
 alt_irq_register(TIMER_IRQ, (void*)&context, irqhandler);
 980:	0009883a 	mov	r4,zero
 984:	0000aac0 	call	aac <alt_irq_register>
  //alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_IRQ,irqhandler,NULL,0x0);
  while (1){
  	*LEDS=*TIMER;
	  if(*SWITCHES==0x6){
 988:	04400184 	movi	r17,6
		  else if(*BUTTON==0xb){
			  minutos=minutos+1;
			  SDECO();
		  }
	  }
	  else if(*SWITCHES==0x5){
 98c:	04800144 	movi	r18,5
 990:	04000044 	movi	r16,1
			  minutos = minutos + 1;
			  DECO();
		  }
		  else{
		  DECO();
		  if(*BUTTON==0xe){
 994:	04c00384 	movi	r19,14
 //IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 7);
 *TC = 0x7;
 alt_irq_register(TIMER_IRQ, (void*)&context, irqhandler);
  //alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_IRQ,irqhandler,NULL,0x0);
  while (1){
  	*LEDS=*TIMER;
 998:	d0e00a17 	ldw	r3,-32728(gp)
 99c:	d0a00117 	ldw	r2,-32764(gp)
 9a0:	18c00017 	ldw	r3,0(r3)
 9a4:	10c00015 	stw	r3,0(r2)
	  if(*SWITCHES==0x6){
 9a8:	d0e00217 	ldw	r3,-32760(gp)
 9ac:	18c00017 	ldw	r3,0(r3)
 9b0:	1c40101e 	bne	r3,r17,9f4 <main+0xc8>
		  SDECO();
 9b4:	00001bc0 	call	1bc <SDECO>
		  if(*BUTTON==0x7){
 9b8:	d0a00017 	ldw	r2,-32768(gp)
 9bc:	00c001c4 	movi	r3,7
 9c0:	10800017 	ldw	r2,0(r2)
 9c4:	10c0041e 	bne	r2,r3,9d8 <main+0xac>
			  horas=horas+1;
 9c8:	d0a02017 	ldw	r2,-32640(gp)
 9cc:	10800044 	addi	r2,r2,1
 9d0:	d0a02015 	stw	r2,-32640(gp)
 9d4:	00000506 	br	9ec <main+0xc0>
			  SDECO();
		  }
		  else if(*BUTTON==0xb){
 9d8:	00c002c4 	movi	r3,11
 9dc:	10ffee1e 	bne	r2,r3,998 <main+0x6c>
			  minutos=minutos+1;
 9e0:	d0a02217 	ldw	r2,-32632(gp)
 9e4:	10800044 	addi	r2,r2,1
 9e8:	d0a02215 	stw	r2,-32632(gp)
			  SDECO();
 9ec:	00001bc0 	call	1bc <SDECO>
 9f0:	003fe906 	br	998 <main+0x6c>
		  }
	  }
	  else if(*SWITCHES==0x5){
 9f4:	1c80111e 	bne	r3,r18,a3c <main+0x110>
		  alarma = 1;
 9f8:	d4201e15 	stw	r16,-32648(gp)
		  ADECO();
 9fc:	00004200 	call	420 <ADECO>
		  if(*BUTTON==0x7){
 a00:	d0a00017 	ldw	r2,-32768(gp)
 a04:	00c001c4 	movi	r3,7
 a08:	10800017 	ldw	r2,0(r2)
 a0c:	10c0041e 	bne	r2,r3,a20 <main+0xf4>
		  			  ahoras=ahoras+1;
 a10:	d0a01b17 	ldw	r2,-32660(gp)
 a14:	10800044 	addi	r2,r2,1
 a18:	d0a01b15 	stw	r2,-32660(gp)
 a1c:	00000506 	br	a34 <main+0x108>
		  			  ADECO();
		  		  }
		  		  else if(*BUTTON==0xb){
 a20:	00c002c4 	movi	r3,11
 a24:	10ffdc1e 	bne	r2,r3,998 <main+0x6c>
		  			  aminutos=aminutos+1;
 a28:	d0a01d17 	ldw	r2,-32652(gp)
 a2c:	10800044 	addi	r2,r2,1
 a30:	d0a01d15 	stw	r2,-32652(gp)
		  			  ADECO();
 a34:	00004200 	call	420 <ADECO>
 a38:	003fd706 	br	998 <main+0x6c>
		  		  }
	  }
	  else{
		  if(alarma==1&&horas2==ahoras2&&horas==ahoras&&minutos2==aminutos2&&minutos==aminutos){
 a3c:	d0e01e17 	ldw	r3,-32648(gp)
 a40:	1c00131e 	bne	r3,r16,a90 <main+0x164>
 a44:	d0e01a17 	ldw	r3,-32664(gp)
 a48:	d1201f17 	ldw	r4,-32644(gp)
 a4c:	20c0101e 	bne	r4,r3,a90 <main+0x164>
 a50:	d0e01b17 	ldw	r3,-32660(gp)
 a54:	d1202017 	ldw	r4,-32640(gp)
 a58:	20c00d1e 	bne	r4,r3,a90 <main+0x164>
 a5c:	d0e01c17 	ldw	r3,-32656(gp)
 a60:	d1202117 	ldw	r4,-32636(gp)
 a64:	20c00a1e 	bne	r4,r3,a90 <main+0x164>
 a68:	d0e01d17 	ldw	r3,-32652(gp)
 a6c:	d1202217 	ldw	r4,-32632(gp)
 a70:	20c0071e 	bne	r4,r3,a90 <main+0x164>
			  *LEDS=0xff;
 a74:	00c03fc4 	movi	r3,255
 a78:	10c00015 	stw	r3,0(r2)
			  minutos = minutos + 1;
 a7c:	d0a02217 	ldw	r2,-32632(gp)
 a80:	10800044 	addi	r2,r2,1
 a84:	d0a02215 	stw	r2,-32632(gp)
			  DECO();
 a88:	00006840 	call	684 <DECO>
 a8c:	003fc206 	br	998 <main+0x6c>
		  }
		  else{
		  DECO();
 a90:	00006840 	call	684 <DECO>
		  if(*BUTTON==0xe){
 a94:	d0a00017 	ldw	r2,-32768(gp)
 a98:	10800017 	ldw	r2,0(r2)
 a9c:	14ffbe1e 	bne	r2,r19,998 <main+0x6c>
		  	*LEDS=0x00;
 aa0:	d0a00117 	ldw	r2,-32764(gp)
 aa4:	10000015 	stw	zero,0(r2)
 aa8:	003fbb06 	br	998 <main+0x6c>

00000aac <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
 aac:	008007c4 	movi	r2,31
 ab0:	11002136 	bltu	r2,r4,b38 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 ab4:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 ab8:	00ffff84 	movi	r3,-2
 abc:	38c4703a 	and	r2,r7,r3
 ac0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
 ac4:	200490fa 	slli	r2,r4,3
 ac8:	02000034 	movhi	r8,0
 acc:	42036604 	addi	r8,r8,3480
 ad0:	4085883a 	add	r2,r8,r2
 ad4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
 ad8:	11400115 	stw	r5,4(r2)
 adc:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 ae0:	30000726 	beq	r6,zero,b00 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 ae4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 ae8:	28c6703a 	and	r3,r5,r3
 aec:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 af0:	d0e02417 	ldw	r3,-32624(gp)
 af4:	1104983a 	sll	r2,r2,r4
 af8:	10c4b03a 	or	r2,r2,r3
 afc:	00000706 	br	b1c <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 b00:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 b04:	28c6703a 	and	r3,r5,r3
 b08:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 b0c:	1104983a 	sll	r2,r2,r4
 b10:	d0e02417 	ldw	r3,-32624(gp)
 b14:	0084303a 	nor	r2,zero,r2
 b18:	10c4703a 	and	r2,r2,r3
 b1c:	d0a02415 	stw	r2,-32624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 b20:	d0a02417 	ldw	r2,-32624(gp)
 b24:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 b28:	2801703a 	wrctl	status,r5
 b2c:	3801703a 	wrctl	status,r7
 b30:	0005883a 	mov	r2,zero
 b34:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
 b38:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
 b3c:	f800283a 	ret

00000b40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 b40:	deffff04 	addi	sp,sp,-4
 b44:	01000034 	movhi	r4,0
 b48:	01400034 	movhi	r5,0
 b4c:	dfc00015 	stw	ra,0(sp)
 b50:	21033d04 	addi	r4,r4,3316
 b54:	29434a04 	addi	r5,r5,3368

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 b58:	2140061e 	bne	r4,r5,b74 <alt_load+0x34>
 b5c:	01000034 	movhi	r4,0
 b60:	01400034 	movhi	r5,0
 b64:	21000804 	addi	r4,r4,32
 b68:	29400804 	addi	r5,r5,32
 b6c:	2140121e 	bne	r4,r5,bb8 <alt_load+0x78>
 b70:	00000b06 	br	ba0 <alt_load+0x60>
 b74:	00c00034 	movhi	r3,0
 b78:	18c34a04 	addi	r3,r3,3368
 b7c:	1907c83a 	sub	r3,r3,r4
 b80:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b84:	10fff526 	beq	r2,r3,b5c <alt_load+0x1c>
    {
      *to++ = *from++;
 b88:	114f883a 	add	r7,r2,r5
 b8c:	39c00017 	ldw	r7,0(r7)
 b90:	110d883a 	add	r6,r2,r4
 b94:	10800104 	addi	r2,r2,4
 b98:	31c00015 	stw	r7,0(r6)
 b9c:	003ff906 	br	b84 <alt_load+0x44>
 ba0:	01000034 	movhi	r4,0
 ba4:	01400034 	movhi	r5,0
 ba8:	21033d04 	addi	r4,r4,3316
 bac:	29433d04 	addi	r5,r5,3316

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 bb0:	2140101e 	bne	r4,r5,bf4 <alt_load+0xb4>
 bb4:	00000b06 	br	be4 <alt_load+0xa4>
 bb8:	00c00034 	movhi	r3,0
 bbc:	18c06004 	addi	r3,r3,384
 bc0:	1907c83a 	sub	r3,r3,r4
 bc4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 bc8:	10fff526 	beq	r2,r3,ba0 <alt_load+0x60>
    {
      *to++ = *from++;
 bcc:	114f883a 	add	r7,r2,r5
 bd0:	39c00017 	ldw	r7,0(r7)
 bd4:	110d883a 	add	r6,r2,r4
 bd8:	10800104 	addi	r2,r2,4
 bdc:	31c00015 	stw	r7,0(r6)
 be0:	003ff906 	br	bc8 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 be4:	0000c700 	call	c70 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 be8:	dfc00017 	ldw	ra,0(sp)
 bec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 bf0:	0000c741 	jmpi	c74 <alt_icache_flush_all>
 bf4:	00c00034 	movhi	r3,0
 bf8:	18c33d04 	addi	r3,r3,3316
 bfc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 c00:	0005883a 	mov	r2,zero
  {
    while( to != end )
 c04:	18bff726 	beq	r3,r2,be4 <alt_load+0xa4>
    {
      *to++ = *from++;
 c08:	114f883a 	add	r7,r2,r5
 c0c:	39c00017 	ldw	r7,0(r7)
 c10:	110d883a 	add	r6,r2,r4
 c14:	10800104 	addi	r2,r2,4
 c18:	31c00015 	stw	r7,0(r6)
 c1c:	003ff906 	br	c04 <alt_load+0xc4>

00000c20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c20:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c24:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c28:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c2c:	0000c4c0 	call	c4c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c30:	0000c6c0 	call	c6c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 c34:	d1a02517 	ldw	r6,-32620(gp)
 c38:	d1602617 	ldw	r5,-32616(gp)
 c3c:	d1202717 	ldw	r4,-32612(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 c40:	dfc00017 	ldw	ra,0(sp)
 c44:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 c48:	000092c1 	jmpi	92c <main>

00000c4c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c4c:	deffff04 	addi	sp,sp,-4
 c50:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 c54:	0000c780 	call	c78 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c58:	00800044 	movi	r2,1
 c5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c60:	dfc00017 	ldw	ra,0(sp)
 c64:	dec00104 	addi	sp,sp,4
 c68:	f800283a 	ret

00000c6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c6c:	f800283a 	ret

00000c70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c70:	f800283a 	ret

00000c74 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c74:	f800283a 	ret

00000c78 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c78:	000170fa 	wrctl	ienable,zero
 c7c:	f800283a 	ret

00000c80 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 c80:	213ffe84 	addi	r4,r4,-6
 c84:	008003c4 	movi	r2,15
 c88:	11001636 	bltu	r2,r4,ce4 <alt_exception_cause_generated_bad_addr+0x64>
 c8c:	200890ba 	slli	r4,r4,2
 c90:	00800034 	movhi	r2,0
 c94:	10832904 	addi	r2,r2,3236
 c98:	2089883a 	add	r4,r4,r2
 c9c:	20800017 	ldw	r2,0(r4)
 ca0:	1000683a 	jmp	r2
 ca4:	00000cec 	andhi	zero,zero,51
 ca8:	00000cec 	andhi	zero,zero,51
 cac:	00000ce4 	muli	zero,zero,51
 cb0:	00000ce4 	muli	zero,zero,51
 cb4:	00000ce4 	muli	zero,zero,51
 cb8:	00000cec 	andhi	zero,zero,51
 cbc:	00000ce4 	muli	zero,zero,51
 cc0:	00000ce4 	muli	zero,zero,51
 cc4:	00000cec 	andhi	zero,zero,51
 cc8:	00000cec 	andhi	zero,zero,51
 ccc:	00000ce4 	muli	zero,zero,51
 cd0:	00000cec 	andhi	zero,zero,51
 cd4:	00000ce4 	muli	zero,zero,51
 cd8:	00000ce4 	muli	zero,zero,51
 cdc:	00000ce4 	muli	zero,zero,51
 ce0:	00000cec 	andhi	zero,zero,51
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 ce4:	0005883a 	mov	r2,zero
 ce8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 cec:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 cf0:	f800283a 	ret
